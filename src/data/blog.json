{
  "status": "ok",
  "feed": {
    "url": "https://medium.com/feed/@mutebg",
    "title": "Stories by Stoyan Delev on Medium",
    "link": "https://medium.com/@mutebg?source=rss-1086cf4b8abe------2",
    "author": "",
    "description": "Stories by Stoyan Delev on Medium",
    "image": "https://cdn-images-1.medium.com/fit/c/150/150/1*exKYJLY88QCwWzxlU2ZllA.jpeg"
  },
  "items": [
    {
      "title": "Using GitLab to build, test and deploy modern front end applications",
      "pubDate": "2019-07-07 06:23:35",
      "link": "https://medium.com/@mutebg/using-gitlab-to-build-test-and-deploy-modern-front-end-applications-bc940501a1f6?source=rss-1086cf4b8abe------2",
      "guid": "https://medium.com/p/bc940501a1f6",
      "author": "Stoyan Delev",
      "thumbnail": "https://cdn-images-1.medium.com/max/1011/1*ZyESrTCwoxrXZ_eZFLj50w.png",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1011/1*ZyESrTCwoxrXZ_eZFLj50w.png\"></figure><p><em>Disclaimer: I don\u2019t claim that is the right way of doing CI/CD, it\u2019s the way that works for\u00a0me.</em></p>\n<p>I\u2019ve been using GitLab and Firebase separately as tools for around 4 years and after I struggling with integrating deployment into my development process, finally around 1 year ago, I decided that its time to combine the power of them: easily manageable gitlab pipelines and simplicity of firebase\u00a0hosting.</p>\n<p>The whole process ( pipeline ) looks like that: <strong><em>Install dependencies -&gt; Build code -&gt; Run tests and linters -&gt; Deploy to Firebase -&gt; Make audit with Lighthouse</em></strong></p>\n<h3>0: The\u00a0project</h3>\n<p>Most of my projects are React based, so for this example, I will use React and Create-React-App ( CRA for short ), however, it works with any modern framework. CRA comes with <a href=\"https://eslint.org/\">eslint</a>, <a href=\"https://jestjs.io/\">jest</a> which I will use for linting and unit testing, on top of that we need to install <a href=\"https://cypress.io/\">Cypress</a> for end-to-end tests. For installing CRA and Cypress check their documentation.</p>\n<h3>1: Configure Firebase</h3>\n<p>The reason I choose firebase is that its super simple to work and provides a lot of benefits out of the box: <strong>http2, CDN, gzip, SSL, h2 push</strong> and has an easy way to reverse deployment.<br>In order to setup firebase just install firebase-tools and run firebase init, you need to select \u201chosting\u201d on the second\u00a0step.</p>\n<p>There are 2 ways to config different environments ( production/staging/test ) in firebase: using different project per env or one project with multiple sites. I personally prefer the second one. <a href=\"https://firebase.google.com/docs/hosting/multisites\">Here is the official documentation of how to do that</a>. Once you are done, your firebase configs should look similar to\u00a0<a href=\"https://gitlab.com/mutebg/frontend-ci/blob/master/.firebaserc\">.firebaserc</a>, <a href=\"https://gitlab.com/mutebg/frontend-ci/blob/master/firebase.json\">firebase.json</a></p>\n<h3>2: Setup\u00a0GitLab</h3>\n<p>All gitlab configurations regarding CI/CD are placed in\u00a0.gitlab-ci.yml file. In gitlab CI you have stages, and every stage has one or many <strong>jobs</strong>. Our stages are: install, build, quality, deploy and audit, they are run one after\u00a0another.</p>\n<ul>\n<li>install\u200a\u2014\u200ainstall all dependencies from\u00a0NPM</li>\n<li>build\u200a\u2014\u200abuild the\u00a0code</li>\n<li>quality\u200a\u2014\u200arun eslint, unit tests with Jest and end-2-end test with\u00a0Cypress</li>\n<li>deploy\u200a\u2014\u200adeploy the code to\u00a0firebase</li>\n<li>audit\u200a\u2014\u200aRun lighthouse against deployed\u00a0code</li>\n</ul>\n<p><strong>Jobs</strong> are fundamentals of gitlab CI, every job should have elements with an arbitrary name and must contain at least the <strong>script</strong> clause, and in our case includes also the\u00a0stage.</p>\n<pre>linting:<br>   stage: quality<br>   script:<br>      - npm run lint</pre>\n<h4>2.1: Install\u00a0step</h4>\n<p>In install stage, we run npm install and put that into artifacts<em> (artifacts is a way \u201c</em><strong><em>save</em></strong><em>\u201d content and transfer it between stages, in our case we keep npm_modules for next stages\u00a0)</em></p>\n<pre>install:<br>   stage: install<br>   script:<br>      - npm install<br>   artifacts:<br>      name: \"artifacts\"<br>      untracked: true<br>      expire_in: 30 mins<br>      paths:<br>        - .npm/<br>        - node_modules/</pre>\n<h4>2.2: Build</h4>\n<p>In <strong>build</strong> stage, as the name says build our code and also put the output into artifacts ( build folder\u00a0).</p>\n<pre>build:<br>   stage: build<br>   script:<br>      - CI=false npm run build<br>   artifacts:<br>      paths:<br>         - build<br>      expire_in: 30 mins<br>   dependencies:<br>      - install</pre>\n<h4>2.3: Quality</h4>\n<p>In that step linters and tests are running, there are 3 different jobs for\u00a0that.</p>\n<p><strong>2.3.1: Linting<br></strong>That is the simplest job, it runs <strong>npm run lint</strong>, which is a script in package.json <strong>\u201cnpx eslint \u2018src/**/*.{js,jsx}\u2019</strong></p>\n<p><strong>2.3.2: Unit tests<br></strong>Running Jest with coverage mode ( Here I use regex to parse output so it can be shown in merge request\u00a0)</p>\n<pre>test:unit:<br>   stage: quality<br>   script:<br>      -  npm run test:coverage<br>   dependencies:<br>      - install<br>   coverage: /All files[^|]*\\|[^|]*\\s+([\\d\\.]+)/</pre>\n<p><strong>2.3.3: End-2-end tests<br></strong>As mentioned earlier for e2e we will use cypress <em>( I must say it again, that is wonderfull tool\u00a0!!! ) </em>Running it in CI requires more complex setup: you need cypress specific docker image, also to be able to run a web server in that docker image, for that purpose I use few packages: sirv, start-server-and-test.<br>Here are the steps how the process looks: Run a web server with already generated code from build step ( serv module ); wait till server is running on a specific port, and finally run cypress against that server ( all those are scripts in package.json )</p>\n<pre>\"e2e\": \"CYPRESS_baseUrl=http://localhost:3333 npx cypress run\",<br>\"e2e:ci\": \"npx start-server-and-test serve:e2e <a href=\"http://localhost:3333/\">http://localhost:3333</a> e2e\",<br>\"serve:e2e\": \"node_modules/.bin/sirv build --quiet --single --port 3333\",</pre>\n<p>so our gitlab-ci config looks\u00a0like:</p>\n<pre>test:e2e:<br>   stage: quality<br>   image: cypress/browsers:chrome69<br>   dependencies:<br>      - install<br>      - build<br>   script:<br>      - npm run e2e:ci<br>   artifacts:<br>      paths:<br>         - cypress/screenshots<br>         - cypress/videos<br>      expire_in: 1 day</pre>\n<p><em>Notice that we saved screenshots and videos from failed test into artifacts, so can be downloaded and reviewed\u00a0later.</em></p>\n<h4>2.4: Deploy</h4>\n<p>That part is quite easy once you setup the firebase.<br>Before writing our deployment job we need to generate firebase token and configure gitlab to use it.<br>run<strong> firebase login:ci </strong>and we will have the token, afterwards and add the token: Gitlab \u2192 Your Project \u2192 Settings \u2192 CI/CD \u2192 Environment variables as \u201c<strong>FIREBASE_TOKEN</strong>\u201d</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ogOHKbZz-AWVkubjBVXSEQ.png\"></figure><p>Since my project has 3 environments ( production/alpha/beta ) I need to write a reusable deployment job.</p>\n<pre>.deploy:<br>   stage: deploy<br>   before_script:<br>      - npm install -g firebase-tools<br>      - (if [ -d \"build\" ]; then echo ok; else exit \"no build folder, try to run pipeline again\"; fi);<br>   script:<br>      - firebase deploy --token $FIREBASE_TOKEN --non-interactive --only hosting:$ENV<br>when: manual</pre>\n<p>Here we have <em>before_script</em> attribute in which install firebase tools and check if \u201cbuild\u201d folder exists. We keep build folder only for 30 min in artifacts so might be that it\u2019s gone. In the script section: we do the real deployment using firebase token and $<strong>ENV</strong> variable ( we pass that from another job )<br>\u201c<strong>when</strong>\u201d section specify how we want to run that job, in our case is manual, but can be automatic as\u00a0well.</p>\n<pre>deploy_to_prod:<br>   environment:<br>      name: prod<br>      url: $PROD_URL<br>   extends: .deploy<br>   variables:<br>      ENV: prod<br>   only:<br>      refs:<br>         - master</pre>\n<p>And here is the deploy to production job, which extends our common\u00a0<strong>.deploy</strong> one also pass ENV variable and with <strong>only </strong>attribute can specify that want to be executed only on <strong>master</strong> branch.<br>Deploy to alpha and beta are the\u00a0same.</p>\n<h4>2.5: Audits</h4>\n<p>After deployment is done, I love to run <a href=\"https://github.com/GoogleChrome/lighthouse\">Lighthouse</a> and collect the stats which can be stored as artifacts.<br>Here is the example\u00a0job:</p>\n<pre>.lighthouse:<br>   image: markhobson/node-chrome<br>   stage: audit<br>   before_script:<br>      - npm i -g lighthouse<br>   script:<br>      - lighthouse --chrome-flags=\"--headless --no-sandbox\" $LIGHTHOUSE_TEST_URL --output html --output-path ./report.html<br>   artifacts:<br>      paths:<br>         - ./report.html<br>      expire_in: 1 month<br>   when: manual</pre>\n<p>That\u2019s pretty much all, here are few <strong>caveats</strong> that you need to\u00a0know:</p>\n<ul>\n<li>Artifacts can take disk space, so set an expiration limit</li>\n<li>Short expiration limit means sometimes you need to re-run the pipeline again if you want to deploy later in\u00a0time.</li>\n</ul>\n<p><a href=\"https://gitlab.com/mutebg/frontend-ci\"><strong>The full code, including firebase, gitlab and project source can be found\u00a0here.</strong></a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bc940501a1f6\" width=\"1\" height=\"1\">\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1011/1*ZyESrTCwoxrXZ_eZFLj50w.png\"></figure><p><em>Disclaimer: I don\u2019t claim that is the right way of doing CI/CD, it\u2019s the way that works for\u00a0me.</em></p>\n<p>I\u2019ve been using GitLab and Firebase separately as tools for around 4 years and after I struggling with integrating deployment into my development process, finally around 1 year ago, I decided that its time to combine the power of them: easily manageable gitlab pipelines and simplicity of firebase\u00a0hosting.</p>\n<p>The whole process ( pipeline ) looks like that: <strong><em>Install dependencies -&gt; Build code -&gt; Run tests and linters -&gt; Deploy to Firebase -&gt; Make audit with Lighthouse</em></strong></p>\n<h3>0: The\u00a0project</h3>\n<p>Most of my projects are React based, so for this example, I will use React and Create-React-App ( CRA for short ), however, it works with any modern framework. CRA comes with <a href=\"https://eslint.org/\">eslint</a>, <a href=\"https://jestjs.io/\">jest</a> which I will use for linting and unit testing, on top of that we need to install <a href=\"https://cypress.io/\">Cypress</a> for end-to-end tests. For installing CRA and Cypress check their documentation.</p>\n<h3>1: Configure Firebase</h3>\n<p>The reason I choose firebase is that its super simple to work and provides a lot of benefits out of the box: <strong>http2, CDN, gzip, SSL, h2 push</strong> and has an easy way to reverse deployment.<br>In order to setup firebase just install firebase-tools and run firebase init, you need to select \u201chosting\u201d on the second\u00a0step.</p>\n<p>There are 2 ways to config different environments ( production/staging/test ) in firebase: using different project per env or one project with multiple sites. I personally prefer the second one. <a href=\"https://firebase.google.com/docs/hosting/multisites\">Here is the official documentation of how to do that</a>. Once you are done, your firebase configs should look similar to\u00a0<a href=\"https://gitlab.com/mutebg/frontend-ci/blob/master/.firebaserc\">.firebaserc</a>, <a href=\"https://gitlab.com/mutebg/frontend-ci/blob/master/firebase.json\">firebase.json</a></p>\n<h3>2: Setup\u00a0GitLab</h3>\n<p>All gitlab configurations regarding CI/CD are placed in\u00a0.gitlab-ci.yml file. In gitlab CI you have stages, and every stage has one or many <strong>jobs</strong>. Our stages are: install, build, quality, deploy and audit, they are run one after\u00a0another.</p>\n<ul>\n<li>install\u200a\u2014\u200ainstall all dependencies from\u00a0NPM</li>\n<li>build\u200a\u2014\u200abuild the\u00a0code</li>\n<li>quality\u200a\u2014\u200arun eslint, unit tests with Jest and end-2-end test with\u00a0Cypress</li>\n<li>deploy\u200a\u2014\u200adeploy the code to\u00a0firebase</li>\n<li>audit\u200a\u2014\u200aRun lighthouse against deployed\u00a0code</li>\n</ul>\n<p><strong>Jobs</strong> are fundamentals of gitlab CI, every job should have elements with an arbitrary name and must contain at least the <strong>script</strong> clause, and in our case includes also the\u00a0stage.</p>\n<pre>linting:<br>   stage: quality<br>   script:<br>      - npm run lint</pre>\n<h4>2.1: Install\u00a0step</h4>\n<p>In install stage, we run npm install and put that into artifacts<em> (artifacts is a way \u201c</em><strong><em>save</em></strong><em>\u201d content and transfer it between stages, in our case we keep npm_modules for next stages\u00a0)</em></p>\n<pre>install:<br>   stage: install<br>   script:<br>      - npm install<br>   artifacts:<br>      name: \"artifacts\"<br>      untracked: true<br>      expire_in: 30 mins<br>      paths:<br>        - .npm/<br>        - node_modules/</pre>\n<h4>2.2: Build</h4>\n<p>In <strong>build</strong> stage, as the name says build our code and also put the output into artifacts ( build folder\u00a0).</p>\n<pre>build:<br>   stage: build<br>   script:<br>      - CI=false npm run build<br>   artifacts:<br>      paths:<br>         - build<br>      expire_in: 30 mins<br>   dependencies:<br>      - install</pre>\n<h4>2.3: Quality</h4>\n<p>In that step linters and tests are running, there are 3 different jobs for\u00a0that.</p>\n<p><strong>2.3.1: Linting<br></strong>That is the simplest job, it runs <strong>npm run lint</strong>, which is a script in package.json <strong>\u201cnpx eslint \u2018src/**/*.{js,jsx}\u2019</strong></p>\n<p><strong>2.3.2: Unit tests<br></strong>Running Jest with coverage mode ( Here I use regex to parse output so it can be shown in merge request\u00a0)</p>\n<pre>test:unit:<br>   stage: quality<br>   script:<br>      -  npm run test:coverage<br>   dependencies:<br>      - install<br>   coverage: /All files[^|]*\\|[^|]*\\s+([\\d\\.]+)/</pre>\n<p><strong>2.3.3: End-2-end tests<br></strong>As mentioned earlier for e2e we will use cypress <em>( I must say it again, that is wonderfull tool\u00a0!!! ) </em>Running it in CI requires more complex setup: you need cypress specific docker image, also to be able to run a web server in that docker image, for that purpose I use few packages: sirv, start-server-and-test.<br>Here are the steps how the process looks: Run a web server with already generated code from build step ( serv module ); wait till server is running on a specific port, and finally run cypress against that server ( all those are scripts in package.json )</p>\n<pre>\"e2e\": \"CYPRESS_baseUrl=http://localhost:3333 npx cypress run\",<br>\"e2e:ci\": \"npx start-server-and-test serve:e2e <a href=\"http://localhost:3333/\">http://localhost:3333</a> e2e\",<br>\"serve:e2e\": \"node_modules/.bin/sirv build --quiet --single --port 3333\",</pre>\n<p>so our gitlab-ci config looks\u00a0like:</p>\n<pre>test:e2e:<br>   stage: quality<br>   image: cypress/browsers:chrome69<br>   dependencies:<br>      - install<br>      - build<br>   script:<br>      - npm run e2e:ci<br>   artifacts:<br>      paths:<br>         - cypress/screenshots<br>         - cypress/videos<br>      expire_in: 1 day</pre>\n<p><em>Notice that we saved screenshots and videos from failed test into artifacts, so can be downloaded and reviewed\u00a0later.</em></p>\n<h4>2.4: Deploy</h4>\n<p>That part is quite easy once you setup the firebase.<br>Before writing our deployment job we need to generate firebase token and configure gitlab to use it.<br>run<strong> firebase login:ci </strong>and we will have the token, afterwards and add the token: Gitlab \u2192 Your Project \u2192 Settings \u2192 CI/CD \u2192 Environment variables as \u201c<strong>FIREBASE_TOKEN</strong>\u201d</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ogOHKbZz-AWVkubjBVXSEQ.png\"></figure><p>Since my project has 3 environments ( production/alpha/beta ) I need to write a reusable deployment job.</p>\n<pre>.deploy:<br>   stage: deploy<br>   before_script:<br>      - npm install -g firebase-tools<br>      - (if [ -d \"build\" ]; then echo ok; else exit \"no build folder, try to run pipeline again\"; fi);<br>   script:<br>      - firebase deploy --token $FIREBASE_TOKEN --non-interactive --only hosting:$ENV<br>when: manual</pre>\n<p>Here we have <em>before_script</em> attribute in which install firebase tools and check if \u201cbuild\u201d folder exists. We keep build folder only for 30 min in artifacts so might be that it\u2019s gone. In the script section: we do the real deployment using firebase token and $<strong>ENV</strong> variable ( we pass that from another job )<br>\u201c<strong>when</strong>\u201d section specify how we want to run that job, in our case is manual, but can be automatic as\u00a0well.</p>\n<pre>deploy_to_prod:<br>   environment:<br>      name: prod<br>      url: $PROD_URL<br>   extends: .deploy<br>   variables:<br>      ENV: prod<br>   only:<br>      refs:<br>         - master</pre>\n<p>And here is the deploy to production job, which extends our common\u00a0<strong>.deploy</strong> one also pass ENV variable and with <strong>only </strong>attribute can specify that want to be executed only on <strong>master</strong> branch.<br>Deploy to alpha and beta are the\u00a0same.</p>\n<h4>2.5: Audits</h4>\n<p>After deployment is done, I love to run <a href=\"https://github.com/GoogleChrome/lighthouse\">Lighthouse</a> and collect the stats which can be stored as artifacts.<br>Here is the example\u00a0job:</p>\n<pre>.lighthouse:<br>   image: markhobson/node-chrome<br>   stage: audit<br>   before_script:<br>      - npm i -g lighthouse<br>   script:<br>      - lighthouse --chrome-flags=\"--headless --no-sandbox\" $LIGHTHOUSE_TEST_URL --output html --output-path ./report.html<br>   artifacts:<br>      paths:<br>         - ./report.html<br>      expire_in: 1 month<br>   when: manual</pre>\n<p>That\u2019s pretty much all, here are few <strong>caveats</strong> that you need to\u00a0know:</p>\n<ul>\n<li>Artifacts can take disk space, so set an expiration limit</li>\n<li>Short expiration limit means sometimes you need to re-run the pipeline again if you want to deploy later in\u00a0time.</li>\n</ul>\n<p><a href=\"https://gitlab.com/mutebg/frontend-ci\"><strong>The full code, including firebase, gitlab and project source can be found\u00a0here.</strong></a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bc940501a1f6\" width=\"1\" height=\"1\">\n",
      "enclosure": {},
      "categories": [
        "front-end-development",
        "firebase",
        "gitlab",
        "javascript",
        "frontend"
      ]
    },
    {
      "title": "Create simple react-head component using react portals",
      "pubDate": "2019-02-05 07:39:50",
      "link": "https://medium.com/@mutebg/create-simple-react-head-component-using-react-portals-c9621004779d?source=rss-1086cf4b8abe------2",
      "guid": "https://medium.com/p/c9621004779d",
      "author": "Stoyan Delev",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*Z6Xvzewk9GGu2IM72Y7fAQ.jpeg",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Z6Xvzewk9GGu2IM72Y7fAQ.jpeg\"><figcaption>Credit <a href=\"https://unsplash.com/photos/4003Ofy-HJE\">https://unsplash.com/photos/4003Ofy-HJE</a></figcaption></figure><h3>Create a simple react-head component using react\u00a0portals</h3>\n<p>I like React and its ecosystem but I don\u2019t like the idea of installing hundreds of dependencies for everything. And I don\u2019t want to use any extra libraries especially when I am building things like PWA, every byte counts so I always try to avoid <em>\u201cnpm install another-library\u201d</em></p>\n<p>So for one of my projects, I needed Head component, similar to <a href=\"https://github.com/tizmagik/react-head\">React Head</a> or <a href=\"https://github.com/nfl/react-helmet\">React Helmet</a> but I didn\u2019t like the API of one and the size of another. So I was looking for simple and better for my case solution.</p>\n<p>Using React Portals seems quite a good idea and doesn\u2019t require any external dependencies. All you need to do is create a portal with document head as a root and render inside that\u00a0portal.</p>\n<a href=\"https://medium.com/media/e9f40ae5d5af856234a7d239fb7e7dee/href\">https://medium.com/media/e9f40ae5d5af856234a7d239fb7e7dee/href</a><p>Afterwards, you can use it like\u00a0so:</p>\n<a href=\"https://medium.com/media/ef9cdd0b557fc814ac747e546db0f8c3/href\">https://medium.com/media/ef9cdd0b557fc814ac747e546db0f8c3/href</a><p>I also prefer creating a helper component for\u00a0that:</p>\n<a href=\"https://medium.com/media/2952d56f8739df099c92c5a95b0d5995/href\">https://medium.com/media/2952d56f8739df099c92c5a95b0d5995/href</a><p>and I use it\u00a0like:</p>\n<a href=\"https://medium.com/media/2c0735c165168ef4f986b16f43adeb38/href\">https://medium.com/media/2c0735c165168ef4f986b16f43adeb38/href</a><p>That is all. <br>No dependency simple solution.<br>I guess you still might consider some of the mentioned libraries if you need more advanced functionality, SSR for\u00a0example.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c9621004779d\" width=\"1\" height=\"1\">\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Z6Xvzewk9GGu2IM72Y7fAQ.jpeg\"><figcaption>Credit <a href=\"https://unsplash.com/photos/4003Ofy-HJE\">https://unsplash.com/photos/4003Ofy-HJE</a></figcaption></figure><h3>Create a simple react-head component using react\u00a0portals</h3>\n<p>I like React and its ecosystem but I don\u2019t like the idea of installing hundreds of dependencies for everything. And I don\u2019t want to use any extra libraries especially when I am building things like PWA, every byte counts so I always try to avoid <em>\u201cnpm install another-library\u201d</em></p>\n<p>So for one of my projects, I needed Head component, similar to <a href=\"https://github.com/tizmagik/react-head\">React Head</a> or <a href=\"https://github.com/nfl/react-helmet\">React Helmet</a> but I didn\u2019t like the API of one and the size of another. So I was looking for simple and better for my case solution.</p>\n<p>Using React Portals seems quite a good idea and doesn\u2019t require any external dependencies. All you need to do is create a portal with document head as a root and render inside that\u00a0portal.</p>\n<a href=\"https://medium.com/media/e9f40ae5d5af856234a7d239fb7e7dee/href\">https://medium.com/media/e9f40ae5d5af856234a7d239fb7e7dee/href</a><p>Afterwards, you can use it like\u00a0so:</p>\n<a href=\"https://medium.com/media/ef9cdd0b557fc814ac747e546db0f8c3/href\">https://medium.com/media/ef9cdd0b557fc814ac747e546db0f8c3/href</a><p>I also prefer creating a helper component for\u00a0that:</p>\n<a href=\"https://medium.com/media/2952d56f8739df099c92c5a95b0d5995/href\">https://medium.com/media/2952d56f8739df099c92c5a95b0d5995/href</a><p>and I use it\u00a0like:</p>\n<a href=\"https://medium.com/media/2c0735c165168ef4f986b16f43adeb38/href\">https://medium.com/media/2c0735c165168ef4f986b16f43adeb38/href</a><p>That is all. <br>No dependency simple solution.<br>I guess you still might consider some of the mentioned libraries if you need more advanced functionality, SSR for\u00a0example.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c9621004779d\" width=\"1\" height=\"1\">\n",
      "enclosure": {},
      "categories": [
        "js",
        "javascript",
        "react-js-tutorials",
        "react",
        "reactjs"
      ]
    },
    {
      "title": "bgweb.bg \u0438\u043b\u0438 \u043a\u0430\u043a\u0432\u043e \u0438 \u043a\u0430\u043a \u043e\u0446\u0435\u043d\u044f\u0432\u0430\u043c\u0435?",
      "pubDate": "2018-10-06 07:48:59",
      "link": "https://medium.com/@mutebg/bgweb-bg-%D0%B8%D0%BB%D0%B8-%D0%BA%D0%B0%D0%BA%D0%B2%D0%BE-%D0%B8-%D0%BA%D0%B0%D0%BA-%D0%BE%D1%86%D0%B5%D0%BD%D1%8F%D0%B2%D0%B0%D0%BC%D0%B5-3122aff3ba3?source=rss-1086cf4b8abe------2",
      "guid": "https://medium.com/p/3122aff3ba3",
      "author": "Stoyan Delev",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*HvwJybcwabiqC256gx-Yuw.png",
      "description": "\n<p>\u041e\u043f\u0438\u0442\u0430\u0445 \u0441\u0435 \u0434\u0430 \u043d\u0430\u043c\u0435\u0440\u044f \u043a\u0430\u043a\u0432\u0438 \u0441\u0430 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438\u0442\u0435 \u0437\u0430 \u043e\u0446\u0435\u043d\u043a\u0430 \u043d\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u0446\u0438\u0442\u0435, \u043d\u043e \u0442\u0430\u043a\u0430 \u0438 \u043d\u0435 \u0440\u0430\u0437\u0431\u0440\u0430\u0445, \u0430 \u0438 \u043d\u0435 \u043c\u0438 \u043e\u0442\u0433\u043e\u0432\u043e\u0440\u0438\u0445\u0430 \u0441\u043b\u0435\u0434 \u043a\u0430\u0442\u043e \u0433\u0438 \u043f\u043e\u043f\u0438\u0442\u0430\u0445 \u0432\u044a\u0432 \u0424\u0435\u0439\u0441\u0431\u0443\u043a. \u0422\u0430, \u0435\u0442\u043e \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u0430 \u043f\u0440\u0438\u043a\u043b\u044e\u0447\u0438, \u0438 \u0430\u0437 \u0440\u0435\u0448\u0438\u0445 \u0434\u0430 \u043e\u0442\u0434\u0435\u043b\u044f 30 \u043c\u0438\u043d \u043e\u0442 \u0432\u0440\u0435\u043c\u0435\u0442\u043e \u0441\u0438 \u0434\u0430 \u043f\u043e\u0433\u043b\u0435\u0434\u043d\u0430 \u043d\u044f\u043a\u043e\u043b\u043a\u043e \u043e\u0442 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0438\u0442\u0435.</p>\n<h4><strong>Accessibility \u044f\u0432\u043d\u043e \u043d\u0435 \u0435\u00a0\u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439</strong></h4>\n<p>\u0427\u0443\u0434\u044f \u0441\u0435 \u0434\u0430\u043b\u0438 \u0436\u0443\u0440\u0438\u0442\u043e \u043d\u0430 bgweb.bg \u0437\u043d\u0430\u0435 \u043a\u0430\u043a\u0432\u043e \u0435 <strong>Accessibility, </strong>\u0438 \u0430\u043a\u043e \u0437\u043d\u0430\u0435, \u0434\u0430\u043b\u0438 \u0438\u0437\u043e\u0431\u0449\u043e \u0432\u0437\u0438\u043c\u0430 \u0442\u043e\u0437\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u043f\u043e\u0434 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435. \u0411\u044a\u0440\u0437\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432 \u0441\u0430\u0439\u0442\u0432\u0435\u0442\u0435 \u043d\u0430 \u043d\u044f\u043a\u043e\u0439 \u043e\u0442 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0438\u0442\u0435 \u043f\u043e\u043a\u0430\u0437\u0432\u0430, \u0447\u0435 \u0434\u043e\u0441\u0442\u0430 \u043e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u0446\u0438\u0442\u0435 \u0441\u0430 \u0437\u0430\u0431\u0440\u0430\u0432\u0438\u043b\u0438 \u0431\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0441\u0438 \u0437\u043d\u0430\u043d\u0438\u044f \u043f\u043e HTML Semantics. Button, div, p, \u0430 \u0438 span \u0438\u043c\u0430\u0442 \u043a\u043e\u0440\u0435\u043d\u043d\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u0438 \u043f\u0440\u0435\u0434\u043d\u0430\u0447\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0418, \u0449\u043e \u0441\u0435 \u043e\u0442\u043d\u0430\u0441\u044f \u0437\u0430 <strong>Accessibility -</strong> \u0442\u043e\u0432\u0430 \u0435 \u0433\u0440\u0443\u0431\u0430 \u0433\u0440\u0435\u0448\u043a\u0430 - \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b, \u0440\u0430\u0437\u0447\u0438\u0442\u0430\u0449 \u0441\u0430\u043c\u043e \u043d\u0430 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430, \u043d\u0438\u043a\u043e\u0433\u0430 \u043d\u044f\u043c\u0430 \u0434\u0430 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0435 \u0434\u043e \u0442\u0435\u0437\u0438 \u201c\u0431\u0443\u0442\u043e\u043d\u0438\u201d. \u041e\u0441\u0432\u0435\u043d \u0442\u043e\u0432\u0430, \u043c\u043d\u043e\u0433\u043e \u043c\u0430\u043b\u043a\u043e \u043e\u0442 \u0441\u0430\u0439\u0442\u043e\u0432\u0435\u0442\u0435 \u0438\u043c\u0430\u0442 element:focus state, \u0442\u0430\u043a\u0430, \u0447\u0435 \u043a\u043e\u0433\u0430\u0442\u043e \u043d\u0430\u0432\u0438\u0433\u0438\u0440\u0430\u0448 \u043f\u0440\u0435\u0437 \u0441\u0430\u0439\u0442\u0430 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u043d\u044f\u043c\u0430\u0448 \u043d\u0438\u043a\u0430\u043a\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0430 \u043a\u044a\u0434\u0435 \u0442\u043e\u0447\u043d\u043e \u0441\u0435\u00a0\u043d\u0430\u043c\u0438\u0440\u0430\u0448.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*HvwJybcwabiqC256gx-Yuw.png\"><figcaption>div\u00a0!==\u00a0button</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*p_Ye4Qak6vlydtJ-5sZgrw.png\"><figcaption>div\u00a0!==\u00a0button</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sus3AfDIOuqA8jFFQl6jNw.png\"><figcaption>span\u00a0!==\u00a0button</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bpuCO_z7pCIIhEUpUaRnMA.png\"><figcaption>p\u00a0!==\u00a0button</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pdNk-CzYnwLFxpsgU7K0kA.png\"><figcaption>div\u00a0!==\u00a0butto</figcaption></figure><p>\u0414\u043d\u0435\u0432\u043d\u0438\u043a \u0441\u0435 \u0441\u043f\u0440\u0430\u0432\u044f\u0442 \u0434\u043e\u0441\u0442\u0430 \u043f\u043e-\u0434\u043e\u0431\u0440\u0435 \u043e\u0442 \u043e\u0441\u0442\u0430\u043d\u0430\u043b\u0438\u0442\u0435 \u043f\u0440\u0438 \u0442\u044a\u0440\u0441e\u043d\u0435\u0442\u043e \u0438 \u0445\u0430\u043c\u0431\u0443\u0440\u0433\u0435\u0440-\u043c\u0435\u043d\u044e\u0442\u043e, \u043d\u043e, \u0432\u0438\u0436\u0434\u0430\u0448 \u043b\u0438, \u0430\u043a\u043e \u043e\u0442\u0432\u043e\u0440\u0438\u0448 popup-\u0430 \u0437\u0430 \u0434\u0430 \u0432\u043b\u0435\u0437\u0435\u0448 \u0432 \u043f\u0440\u043e\u0444\u0438\u043b\u0430 \u0441\u0438, \u0444\u043e\u043a\u0443\u0441\u044a\u0442 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0432\u0441\u0435 \u043e\u0449\u0435 \u0435 \u043d\u0430 \u043b\u0438\u043d\u043a\u0430, \u0430 \u0431\u0438 \u0442\u0440\u044f\u0431\u0432\u0430\u043b\u043e \u043a\u043e\u0433\u0430\u0442\u043e \u0433\u043e \u043e\u0442\u0432\u043e\u0440\u0438\u0448 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u043d\u043e \u0444\u043e\u043a\u0443\u0441\u044a\u0442 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0434\u0430 \u0431\u044a\u0434\u0435 \u043f\u0440\u0435\u043d\u0435\u0441\u0435\u043d \u0432\u044a\u0440\u0445\u0443 \u043d\u0435\u0433\u043e ( popup-a\u00a0).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*epR7wWmHNl0Q7Sf5nZe22w.png\"><figcaption>btw: \u0434\u043e\u0441\u0442\u0430 \u043f\u043e-\u043f\u0440\u0430\u0432\u0438\u043b\u043d\u043e \u0435 \u0434\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430 <strong>button</strong> \u0432\u043c\u0435\u0441\u0442\u043e\u00a0<strong>a</strong></figcaption></figure><h4>\u041a\u0430\u043a\u044a\u0432\u0442\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0442\u0430\u043a\u0438\u0432\u0430 \u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u0446\u0438\u0442\u0435</h4>\n<p>\u041d\u0435 \u043c\u0435 \u0443\u0447\u0443\u0434\u0432\u0430, \u0447\u0435 \u043f\u043e\u0432\u0435\u0447\u0435\u0442\u043e \u0441\u0430\u0439\u0442\u043e\u0432\u0435 \u043d\u044f\u043c\u0430\u0442 \u043d\u0438\u043a\u0430\u043a\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0430 \u043a\u0430\u043a\u0432\u043e \u0435 <strong>accesability -</strong> \u0441\u0430\u043c\u043e \u043f\u043e\u0433\u043b\u0435\u0434\u043d\u0435\u0442\u0435 \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0438\u0442\u0435 bgweb.bg</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WGxs27_1Krl5-3MoV_kU6Q.png\"><figcaption>\u0411\u0443\u0442\u043e\u043d\u0438\u0442\u0435 \u0437\u0430 \u043d\u0430\u043f\u0440\u0435\u0434/\u043d\u0430\u0437\u0430\u0434 \u0441\u0430 div \u0432\u043c\u0435\u0441\u0442\u043e\u00a0button?!</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YLNfKR1ZEP-JPFy-rzOHNQ.png\"><figcaption>div, div, div \u043d\u044f\u043c\u0430\u043c\u0435 \u043d\u0443\u0436\u0434\u0430 \u043e\u0442 \u0431\u0443\u0442\u043e\u043d\u0438, \u0442\u0435 \u0441\u0430 \u0437\u0430 \u0430\u043c\u0430\u0442\u044c\u043e\u0440\u0438\u0442\u0435</figcaption></figure><p>\u0418 \u043e\u0442\u043d\u043e\u0432\u043e \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u043f\u043e\u043c\u0435\u043d\u0430 \u043b\u0438\u043f\u0441\u0430\u0442\u0430 \u043d\u0430 focus, \u043a\u0430\u043a\u0442\u043e \u0438 \u0442\u0435\u043a\u0441\u0442 \u0441 \u043d\u0435\u0434\u043e\u0431\u044a\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0441\u0442.</p>\n<p>\u041d\u0435 \u0438\u0441\u043a\u0430\u043c \u0434\u0430 \u0437\u0430\u043f\u043e\u0447\u0432\u0430\u043c \u0442\u0435\u043c\u0430\u0442\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0430 \u0441 performance, \u0437\u0430\u0449\u043e\u0442\u043e \u0442\u0430\u043c \u043d\u0435\u0449\u0430\u0442\u0430 \u0441\u0430 \u0442\u0440\u0430\u0433\u0438\u0447\u043d\u0438. \u0421\u0430\u0439\u0442\u043e\u0432\u0435\u0442\u0435 \u0440\u044f\u0434\u043a\u043e \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u0442 \u0437\u0430 \u043f\u043e\u0434 10 \u0441\u0435\u043a\u0443\u043d\u0434\u0438 \u043d\u0430 3G, \u0434\u043e\u043a\u0430\u0442\u043e time to interactive \u0435 \u043d\u0430\u0434\u00a015\u0441\u0435\u043a.</p>\n<p>\u0410\u043a\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0441\u0435 \u0447\u0443\u0434\u0435\u0442\u0435 \u043a\u0430\u043a\u0432\u043e \u0441\u0430 \u0434\u043e\u0431\u0440\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0437\u0430 \u043e\u0446\u0435\u043d\u043a\u0430 \u043d\u0430 \u0441\u0430\u0439\u0442 \u043c\u043e\u0436\u0435 \u0434\u0430 \u043f\u043e\u0433\u043b\u0435\u0434\u043d\u0435\u0442\u0435 \u0442\u0435\u0437\u0438 \u043d\u0430 <strong>awwwards.com</strong><br><a href=\"https://docs.google.com/document/d/1Gvmg6Z60UQ-4BOM3XyUcBKvq2shd4J-l_MoXT26JFEg/edit?usp=sharing\">https://docs.google.com/document/d/1Gvmg6Z60UQ-4BOM3XyUcBKvq2shd4J-l_MoXT26JFEg/edit?usp=sharing</a></p>\n<p><em>P.S. \u041d\u044f\u0434\u044f\u0432\u0430\u043c \u0441\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u043f\u0440\u0438\u0435\u0442\u043e \u043a\u0430\u0442\u043e \u0433\u0440\u0430\u0434\u0438\u0432\u043d\u0430 \u043a\u0440\u0438\u0442\u0438\u043a\u0430. \u0412\u0441\u0438\u0447\u043a\u043e \u043a\u043e\u0435\u0442\u043e \u0438\u0441\u043a\u0430\u043c \u0435 \u043f\u043e-\u0434\u043e\u0431\u044a\u0440 \u0423\u0415\u0411. \u0421\u0440\u0430\u043c\u043d\u043e \u0435 \u0447\u0435 \u043f\u0440\u0435\u0437 2018 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u043f\u043e\u043c\u0435\u043d\u044f\u0432\u0430\u043c\u0435 </em>accessibility<em> &amp; pefrormance \u043a\u0430\u0442\u043e \u043d\u0435\u0449\u043e \u043a\u043e\u0435\u0442\u043e \u0435 nice-to-have.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3122aff3ba3\" width=\"1\" height=\"1\">\n",
      "content": "\n<p>\u041e\u043f\u0438\u0442\u0430\u0445 \u0441\u0435 \u0434\u0430 \u043d\u0430\u043c\u0435\u0440\u044f \u043a\u0430\u043a\u0432\u0438 \u0441\u0430 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438\u0442\u0435 \u0437\u0430 \u043e\u0446\u0435\u043d\u043a\u0430 \u043d\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u0446\u0438\u0442\u0435, \u043d\u043e \u0442\u0430\u043a\u0430 \u0438 \u043d\u0435 \u0440\u0430\u0437\u0431\u0440\u0430\u0445, \u0430 \u0438 \u043d\u0435 \u043c\u0438 \u043e\u0442\u0433\u043e\u0432\u043e\u0440\u0438\u0445\u0430 \u0441\u043b\u0435\u0434 \u043a\u0430\u0442\u043e \u0433\u0438 \u043f\u043e\u043f\u0438\u0442\u0430\u0445 \u0432\u044a\u0432 \u0424\u0435\u0439\u0441\u0431\u0443\u043a. \u0422\u0430, \u0435\u0442\u043e \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u0430 \u043f\u0440\u0438\u043a\u043b\u044e\u0447\u0438, \u0438 \u0430\u0437 \u0440\u0435\u0448\u0438\u0445 \u0434\u0430 \u043e\u0442\u0434\u0435\u043b\u044f 30 \u043c\u0438\u043d \u043e\u0442 \u0432\u0440\u0435\u043c\u0435\u0442\u043e \u0441\u0438 \u0434\u0430 \u043f\u043e\u0433\u043b\u0435\u0434\u043d\u0430 \u043d\u044f\u043a\u043e\u043b\u043a\u043e \u043e\u0442 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0438\u0442\u0435.</p>\n<h4><strong>Accessibility \u044f\u0432\u043d\u043e \u043d\u0435 \u0435\u00a0\u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439</strong></h4>\n<p>\u0427\u0443\u0434\u044f \u0441\u0435 \u0434\u0430\u043b\u0438 \u0436\u0443\u0440\u0438\u0442\u043e \u043d\u0430 bgweb.bg \u0437\u043d\u0430\u0435 \u043a\u0430\u043a\u0432\u043e \u0435 <strong>Accessibility, </strong>\u0438 \u0430\u043a\u043e \u0437\u043d\u0430\u0435, \u0434\u0430\u043b\u0438 \u0438\u0437\u043e\u0431\u0449\u043e \u0432\u0437\u0438\u043c\u0430 \u0442\u043e\u0437\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u043f\u043e\u0434 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435. \u0411\u044a\u0440\u0437\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432 \u0441\u0430\u0439\u0442\u0432\u0435\u0442\u0435 \u043d\u0430 \u043d\u044f\u043a\u043e\u0439 \u043e\u0442 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0438\u0442\u0435 \u043f\u043e\u043a\u0430\u0437\u0432\u0430, \u0447\u0435 \u0434\u043e\u0441\u0442\u0430 \u043e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u0446\u0438\u0442\u0435 \u0441\u0430 \u0437\u0430\u0431\u0440\u0430\u0432\u0438\u043b\u0438 \u0431\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0441\u0438 \u0437\u043d\u0430\u043d\u0438\u044f \u043f\u043e HTML Semantics. Button, div, p, \u0430 \u0438 span \u0438\u043c\u0430\u0442 \u043a\u043e\u0440\u0435\u043d\u043d\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u0438 \u043f\u0440\u0435\u0434\u043d\u0430\u0447\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0418, \u0449\u043e \u0441\u0435 \u043e\u0442\u043d\u0430\u0441\u044f \u0437\u0430 <strong>Accessibility -</strong> \u0442\u043e\u0432\u0430 \u0435 \u0433\u0440\u0443\u0431\u0430 \u0433\u0440\u0435\u0448\u043a\u0430 - \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b, \u0440\u0430\u0437\u0447\u0438\u0442\u0430\u0449 \u0441\u0430\u043c\u043e \u043d\u0430 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430, \u043d\u0438\u043a\u043e\u0433\u0430 \u043d\u044f\u043c\u0430 \u0434\u0430 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0435 \u0434\u043e \u0442\u0435\u0437\u0438 \u201c\u0431\u0443\u0442\u043e\u043d\u0438\u201d. \u041e\u0441\u0432\u0435\u043d \u0442\u043e\u0432\u0430, \u043c\u043d\u043e\u0433\u043e \u043c\u0430\u043b\u043a\u043e \u043e\u0442 \u0441\u0430\u0439\u0442\u043e\u0432\u0435\u0442\u0435 \u0438\u043c\u0430\u0442 element:focus state, \u0442\u0430\u043a\u0430, \u0447\u0435 \u043a\u043e\u0433\u0430\u0442\u043e \u043d\u0430\u0432\u0438\u0433\u0438\u0440\u0430\u0448 \u043f\u0440\u0435\u0437 \u0441\u0430\u0439\u0442\u0430 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u043d\u044f\u043c\u0430\u0448 \u043d\u0438\u043a\u0430\u043a\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0430 \u043a\u044a\u0434\u0435 \u0442\u043e\u0447\u043d\u043e \u0441\u0435\u00a0\u043d\u0430\u043c\u0438\u0440\u0430\u0448.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*HvwJybcwabiqC256gx-Yuw.png\"><figcaption>div\u00a0!==\u00a0button</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*p_Ye4Qak6vlydtJ-5sZgrw.png\"><figcaption>div\u00a0!==\u00a0button</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sus3AfDIOuqA8jFFQl6jNw.png\"><figcaption>span\u00a0!==\u00a0button</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bpuCO_z7pCIIhEUpUaRnMA.png\"><figcaption>p\u00a0!==\u00a0button</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pdNk-CzYnwLFxpsgU7K0kA.png\"><figcaption>div\u00a0!==\u00a0butto</figcaption></figure><p>\u0414\u043d\u0435\u0432\u043d\u0438\u043a \u0441\u0435 \u0441\u043f\u0440\u0430\u0432\u044f\u0442 \u0434\u043e\u0441\u0442\u0430 \u043f\u043e-\u0434\u043e\u0431\u0440\u0435 \u043e\u0442 \u043e\u0441\u0442\u0430\u043d\u0430\u043b\u0438\u0442\u0435 \u043f\u0440\u0438 \u0442\u044a\u0440\u0441e\u043d\u0435\u0442\u043e \u0438 \u0445\u0430\u043c\u0431\u0443\u0440\u0433\u0435\u0440-\u043c\u0435\u043d\u044e\u0442\u043e, \u043d\u043e, \u0432\u0438\u0436\u0434\u0430\u0448 \u043b\u0438, \u0430\u043a\u043e \u043e\u0442\u0432\u043e\u0440\u0438\u0448 popup-\u0430 \u0437\u0430 \u0434\u0430 \u0432\u043b\u0435\u0437\u0435\u0448 \u0432 \u043f\u0440\u043e\u0444\u0438\u043b\u0430 \u0441\u0438, \u0444\u043e\u043a\u0443\u0441\u044a\u0442 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0432\u0441\u0435 \u043e\u0449\u0435 \u0435 \u043d\u0430 \u043b\u0438\u043d\u043a\u0430, \u0430 \u0431\u0438 \u0442\u0440\u044f\u0431\u0432\u0430\u043b\u043e \u043a\u043e\u0433\u0430\u0442\u043e \u0433\u043e \u043e\u0442\u0432\u043e\u0440\u0438\u0448 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u043d\u043e \u0444\u043e\u043a\u0443\u0441\u044a\u0442 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0434\u0430 \u0431\u044a\u0434\u0435 \u043f\u0440\u0435\u043d\u0435\u0441\u0435\u043d \u0432\u044a\u0440\u0445\u0443 \u043d\u0435\u0433\u043e ( popup-a\u00a0).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*epR7wWmHNl0Q7Sf5nZe22w.png\"><figcaption>btw: \u0434\u043e\u0441\u0442\u0430 \u043f\u043e-\u043f\u0440\u0430\u0432\u0438\u043b\u043d\u043e \u0435 \u0434\u0430 \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430 <strong>button</strong> \u0432\u043c\u0435\u0441\u0442\u043e\u00a0<strong>a</strong></figcaption></figure><h4>\u041a\u0430\u043a\u044a\u0432\u0442\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0442\u0430\u043a\u0438\u0432\u0430 \u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u0446\u0438\u0442\u0435</h4>\n<p>\u041d\u0435 \u043c\u0435 \u0443\u0447\u0443\u0434\u0432\u0430, \u0447\u0435 \u043f\u043e\u0432\u0435\u0447\u0435\u0442\u043e \u0441\u0430\u0439\u0442\u043e\u0432\u0435 \u043d\u044f\u043c\u0430\u0442 \u043d\u0438\u043a\u0430\u043a\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0430 \u043a\u0430\u043a\u0432\u043e \u0435 <strong>accesability -</strong> \u0441\u0430\u043c\u043e \u043f\u043e\u0433\u043b\u0435\u0434\u043d\u0435\u0442\u0435 \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0438\u0442\u0435 bgweb.bg</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WGxs27_1Krl5-3MoV_kU6Q.png\"><figcaption>\u0411\u0443\u0442\u043e\u043d\u0438\u0442\u0435 \u0437\u0430 \u043d\u0430\u043f\u0440\u0435\u0434/\u043d\u0430\u0437\u0430\u0434 \u0441\u0430 div \u0432\u043c\u0435\u0441\u0442\u043e\u00a0button?!</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YLNfKR1ZEP-JPFy-rzOHNQ.png\"><figcaption>div, div, div \u043d\u044f\u043c\u0430\u043c\u0435 \u043d\u0443\u0436\u0434\u0430 \u043e\u0442 \u0431\u0443\u0442\u043e\u043d\u0438, \u0442\u0435 \u0441\u0430 \u0437\u0430 \u0430\u043c\u0430\u0442\u044c\u043e\u0440\u0438\u0442\u0435</figcaption></figure><p>\u0418 \u043e\u0442\u043d\u043e\u0432\u043e \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u043f\u043e\u043c\u0435\u043d\u0430 \u043b\u0438\u043f\u0441\u0430\u0442\u0430 \u043d\u0430 focus, \u043a\u0430\u043a\u0442\u043e \u0438 \u0442\u0435\u043a\u0441\u0442 \u0441 \u043d\u0435\u0434\u043e\u0431\u044a\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u0441\u0442.</p>\n<p>\u041d\u0435 \u0438\u0441\u043a\u0430\u043c \u0434\u0430 \u0437\u0430\u043f\u043e\u0447\u0432\u0430\u043c \u0442\u0435\u043c\u0430\u0442\u0430 \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0430 \u0441 performance, \u0437\u0430\u0449\u043e\u0442\u043e \u0442\u0430\u043c \u043d\u0435\u0449\u0430\u0442\u0430 \u0441\u0430 \u0442\u0440\u0430\u0433\u0438\u0447\u043d\u0438. \u0421\u0430\u0439\u0442\u043e\u0432\u0435\u0442\u0435 \u0440\u044f\u0434\u043a\u043e \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u0442 \u0437\u0430 \u043f\u043e\u0434 10 \u0441\u0435\u043a\u0443\u043d\u0434\u0438 \u043d\u0430 3G, \u0434\u043e\u043a\u0430\u0442\u043e time to interactive \u0435 \u043d\u0430\u0434\u00a015\u0441\u0435\u043a.</p>\n<p>\u0410\u043a\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0441\u0435 \u0447\u0443\u0434\u0435\u0442\u0435 \u043a\u0430\u043a\u0432\u043e \u0441\u0430 \u0434\u043e\u0431\u0440\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0437\u0430 \u043e\u0446\u0435\u043d\u043a\u0430 \u043d\u0430 \u0441\u0430\u0439\u0442 \u043c\u043e\u0436\u0435 \u0434\u0430 \u043f\u043e\u0433\u043b\u0435\u0434\u043d\u0435\u0442\u0435 \u0442\u0435\u0437\u0438 \u043d\u0430 <strong>awwwards.com</strong><br><a href=\"https://docs.google.com/document/d/1Gvmg6Z60UQ-4BOM3XyUcBKvq2shd4J-l_MoXT26JFEg/edit?usp=sharing\">https://docs.google.com/document/d/1Gvmg6Z60UQ-4BOM3XyUcBKvq2shd4J-l_MoXT26JFEg/edit?usp=sharing</a></p>\n<p><em>P.S. \u041d\u044f\u0434\u044f\u0432\u0430\u043c \u0441\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u043f\u0440\u0438\u0435\u0442\u043e \u043a\u0430\u0442\u043e \u0433\u0440\u0430\u0434\u0438\u0432\u043d\u0430 \u043a\u0440\u0438\u0442\u0438\u043a\u0430. \u0412\u0441\u0438\u0447\u043a\u043e \u043a\u043e\u0435\u0442\u043e \u0438\u0441\u043a\u0430\u043c \u0435 \u043f\u043e-\u0434\u043e\u0431\u044a\u0440 \u0423\u0415\u0411. \u0421\u0440\u0430\u043c\u043d\u043e \u0435 \u0447\u0435 \u043f\u0440\u0435\u0437 2018 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0441\u043f\u043e\u043c\u0435\u043d\u044f\u0432\u0430\u043c\u0435 </em>accessibility<em> &amp; pefrormance \u043a\u0430\u0442\u043e \u043d\u0435\u0449\u043e \u043a\u043e\u0435\u0442\u043e \u0435 nice-to-have.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3122aff3ba3\" width=\"1\" height=\"1\">\n",
      "enclosure": {},
      "categories": []
    },
    {
      "title": "The web sucks because of us",
      "pubDate": "2018-09-02 12:10:06",
      "link": "https://medium.com/@mutebg/the-web-sucks-because-of-us-d665bfb352d4?source=rss-1086cf4b8abe------2",
      "guid": "https://medium.com/p/d665bfb352d4",
      "author": "Stoyan Delev",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*O5HiJIuKk9u_tObqm5xaaw.png",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*O5HiJIuKk9u_tObqm5xaaw.png\"></figure><p>Most of the web sucks today, and the reason for that are the people who actually create it, web developers. With sucks I mean: bad UX, bad performance, bad accessibility. We, the developers forgot ( or maybe we never learned ) the fundamentals of the web. &lt;h1&gt; is not the same as &lt;div&gt;, not every page requires React, but most important we are building for people not for ourselves, no one from your users cares which framework you use. I wish we put more energy into delivering better UX than fighting react vs angular vs vue. I wish we spent more time learning how to improve performance than how to use redux-saga. I wish talked about inclusive design instead CSS-in-JS. But I know my wishes are different from\u00a0yours.</p>\n<h4>Performance</h4>\n<p>Let me give you an example, why the performance is important: When I want to buy something, I google it, click on the link but the site doesn\u2019t open fast enough, so I close it and go to the next one. Pretty simple. Your customers will not wait for a page to load, they will close the tab and click on the next google\u00a0result.</p>\n<p>Start with defining your goal: reading an article, buying a product, booking a hotel room. Strip everything and show only the most critical and relevant information to the users. Sending less code to the users means faster loading. Nobody will appreciate your beautiful animations and transitions if they never managed to open your page. Some researches show that people just close the page if doesn\u2019t not load under 5 seconds on\u00a0mobile.</p>\n<p>No all users have fast internet (metro, train, busy network, or just on vacation in a country without good 4g/3g), no all users have the latest and greatest hardware. Parsing 500kb of JS on the newest iPhone is a few times slower than an average mid-range phone.</p>\n<p>We need to measure the time for which user achieve their goals, not how much time they spend on the page. Maybe they spend more time because your page is loading slow or your UI is confusing. Everyone will be happy if the users enter and do their tasks without wasting their time and\u00a0energy.</p>\n<p>Are you ready to lose a certain percentage of your potential customers just because you want this fancy animated banner ( which btw everyone thing is super annoying and distracting )</p>\n<p>Also, page speed is one of the ranking factors for Google\u2019s mobile\u00a0search.</p>\n<p>And don\u2019t forget: mobile web is a\u00a0THING!</p>\n<h4>Accessibility</h4>\n<p>Another super underrated topic, again we can check the world statistics and see that <strong>X</strong> per cent of the world has some kind of disability. What if we can convert this percentage of people into our customers. Can we make our page more inclusive?</p>\n<p>Most of the accessibility problems are solved at the design stage. To design for accessibility means to be inclusive to the needs of your users. The topic is so huge: taking into account things like contrast, font size, letter spacing, animations, long text. People can have different disabilities, or maybe they don\u2019t have, maybe they are just tired at the end of a long working day and have difficulties to focus, or they are handling a baby in one hand and trying to do some task on your page with another one, or even simpler example with sitting in a noisy office space. So many stuff to care\u00a0about\u2026</p>\n<p>Try to avoid things like mouse-only navigation, don\u2019t remove focus style, make big tab areas, use HTML semantics, don\u2019t use long forms when is possible.</p>\n<p>Don\u2019t forget: we all are getting older and soon or later we will experience this terribly inaccessible web.</p>\n<h4>Progressive enhancement</h4>\n<p>Is like 10 years old term, by today every developer must know what that means and how to apply it, unfortunately, that is not the case.<br>We should ask ourselves: What happens when a specific browser feature is not supported? Is there a way to support it? How many people use this browser? What is the cost to support\u00a0it?</p>\n<p>Can we convert those people into customers?<br>There are too many browsers out there, you can\u2019t test all of them, try to fallow web standards.</p>\n<p>Example: use payment request API for collecting user address and payment instead showing a long checkout form, and fallback to the form when the browser does not support the\u00a0API.</p>\n<p>We forgot too often, what our users/customers want and do what we as developers and designers want to do and\u00a0see.</p>\n<p>In the end, it is all about users, and if you don\u2019t care about them you must care about the business; otherwise you will not have a salary at the end of the\u00a0month.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/770/1*Jbz9f-Wrxkp2VCD9ADpSzQ.png\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d665bfb352d4\" width=\"1\" height=\"1\">\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*O5HiJIuKk9u_tObqm5xaaw.png\"></figure><p>Most of the web sucks today, and the reason for that are the people who actually create it, web developers. With sucks I mean: bad UX, bad performance, bad accessibility. We, the developers forgot ( or maybe we never learned ) the fundamentals of the web. &lt;h1&gt; is not the same as &lt;div&gt;, not every page requires React, but most important we are building for people not for ourselves, no one from your users cares which framework you use. I wish we put more energy into delivering better UX than fighting react vs angular vs vue. I wish we spent more time learning how to improve performance than how to use redux-saga. I wish talked about inclusive design instead CSS-in-JS. But I know my wishes are different from\u00a0yours.</p>\n<h4>Performance</h4>\n<p>Let me give you an example, why the performance is important: When I want to buy something, I google it, click on the link but the site doesn\u2019t open fast enough, so I close it and go to the next one. Pretty simple. Your customers will not wait for a page to load, they will close the tab and click on the next google\u00a0result.</p>\n<p>Start with defining your goal: reading an article, buying a product, booking a hotel room. Strip everything and show only the most critical and relevant information to the users. Sending less code to the users means faster loading. Nobody will appreciate your beautiful animations and transitions if they never managed to open your page. Some researches show that people just close the page if doesn\u2019t not load under 5 seconds on\u00a0mobile.</p>\n<p>No all users have fast internet (metro, train, busy network, or just on vacation in a country without good 4g/3g), no all users have the latest and greatest hardware. Parsing 500kb of JS on the newest iPhone is a few times slower than an average mid-range phone.</p>\n<p>We need to measure the time for which user achieve their goals, not how much time they spend on the page. Maybe they spend more time because your page is loading slow or your UI is confusing. Everyone will be happy if the users enter and do their tasks without wasting their time and\u00a0energy.</p>\n<p>Are you ready to lose a certain percentage of your potential customers just because you want this fancy animated banner ( which btw everyone thing is super annoying and distracting )</p>\n<p>Also, page speed is one of the ranking factors for Google\u2019s mobile\u00a0search.</p>\n<p>And don\u2019t forget: mobile web is a\u00a0THING!</p>\n<h4>Accessibility</h4>\n<p>Another super underrated topic, again we can check the world statistics and see that <strong>X</strong> per cent of the world has some kind of disability. What if we can convert this percentage of people into our customers. Can we make our page more inclusive?</p>\n<p>Most of the accessibility problems are solved at the design stage. To design for accessibility means to be inclusive to the needs of your users. The topic is so huge: taking into account things like contrast, font size, letter spacing, animations, long text. People can have different disabilities, or maybe they don\u2019t have, maybe they are just tired at the end of a long working day and have difficulties to focus, or they are handling a baby in one hand and trying to do some task on your page with another one, or even simpler example with sitting in a noisy office space. So many stuff to care\u00a0about\u2026</p>\n<p>Try to avoid things like mouse-only navigation, don\u2019t remove focus style, make big tab areas, use HTML semantics, don\u2019t use long forms when is possible.</p>\n<p>Don\u2019t forget: we all are getting older and soon or later we will experience this terribly inaccessible web.</p>\n<h4>Progressive enhancement</h4>\n<p>Is like 10 years old term, by today every developer must know what that means and how to apply it, unfortunately, that is not the case.<br>We should ask ourselves: What happens when a specific browser feature is not supported? Is there a way to support it? How many people use this browser? What is the cost to support\u00a0it?</p>\n<p>Can we convert those people into customers?<br>There are too many browsers out there, you can\u2019t test all of them, try to fallow web standards.</p>\n<p>Example: use payment request API for collecting user address and payment instead showing a long checkout form, and fallback to the form when the browser does not support the\u00a0API.</p>\n<p>We forgot too often, what our users/customers want and do what we as developers and designers want to do and\u00a0see.</p>\n<p>In the end, it is all about users, and if you don\u2019t care about them you must care about the business; otherwise you will not have a salary at the end of the\u00a0month.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/770/1*Jbz9f-Wrxkp2VCD9ADpSzQ.png\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d665bfb352d4\" width=\"1\" height=\"1\">\n",
      "enclosure": {},
      "categories": [
        "accessibility",
        "web-design",
        "web",
        "web-development",
        "performance"
      ]
    },
    {
      "title": "thanks for sharing this experience, one of the best article I ever read in medium. Super usefull",
      "pubDate": "2018-07-17 12:42:42",
      "link": "https://medium.com/@mutebg/thanks-for-sharing-this-experience-one-of-the-best-article-i-ever-read-in-medium-super-usefull-5c57d89ba285?source=rss-1086cf4b8abe------2",
      "guid": "https://medium.com/p/5c57d89ba285",
      "author": "Stoyan Delev",
      "thumbnail": "https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5c57d89ba285",
      "description": "\n<p>thanks for sharing this experience, one of the best article I ever read in medium. Super\u00a0usefull</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5c57d89ba285\" width=\"1\" height=\"1\">\n",
      "content": "\n<p>thanks for sharing this experience, one of the best article I ever read in medium. Super\u00a0usefull</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5c57d89ba285\" width=\"1\" height=\"1\">\n",
      "enclosure": {},
      "categories": []
    },
    {
      "title": "How the world of front-end development changed in just three years",
      "pubDate": "2018-05-31 19:37:21",
      "link": "https://medium.com/elements/three-years-in-frontend-feels-like-two-different-worlds-f73ea2de4ba0?source=rss-1086cf4b8abe------2",
      "guid": "https://medium.com/p/f73ea2de4ba0",
      "author": "Stoyan Delev",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*UfGLUkWQ6Hw-LoldoDcwVw.jpeg",
      "description": "\n<p>Three years ago I worked on a big Angular project, which took like six months to finish. Nowadays I only maintain this project and maybe add a few small features every couple of months. The last time when I made some changes, I realised how massive the shift between 2015 and 2018 is. Things in the front-end world move fast, so often there is no time to\u00a0migrate.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UfGLUkWQ6Hw-LoldoDcwVw.jpeg\"></figure><h3>Angular to\u00a0React</h3>\n<p>Three years ago everyone was using Angular, and it was the framework that changed the way we think about client-side web applications. It added so many new concepts and features, but after that React came, and we had to re-think everything again. From components model ( I know, it kind of exists in Angular as directives), virtual-dom, one-direction data binding. React set new rules and ideas which even the current version of Angular\u00a0follows.</p>\n<h3>ES5 to ES\u00a02015</h3>\n<p>The long-awaited 6th version of JS arrived in 2015 and brought so many new features like classes, promises, generators, the list is enormous and took a long time to learn and adopt them in practice. Some of the features were influenced by people who come from other languages and platforms.</p>\n<h3>OOP to Functional programming</h3>\n<p>Somehow React, and ES2015 enforced functional programming, and we started to think about UI as a function of current application state, we begin to write small pure functions as components, trying to isolate side effects and use immutable data structures. ES2015 brought classes but also arrow functions; we prefer to compose functions instead of extending classes.</p>\n<h3>From MV* to Components and\u00a0Redux</h3>\n<p>As I mentioned early, React introduced to the masses components architecture, together with functional programming and uni-directional data-flow. Redux also changed the way we think about the application state. Instead of having different Angular services with handler data, we have a single source of truth. Redux made everything much simpler and easier to maintain and debug. The pattern is so powerful that we can see in other JS frameworks and even languages and platforms to adopt it: such as Swift and\u00a0Java.</p>\n<h3>New languages</h3>\n<p>As the web became the largest and most influential platform in the world, more and more developers started to build for it. And we all know that the only language on the web is JavaScript, which became the target language.</p>\n<p>Many new languages were born to improve the developer\u2019s experience since not all developers, understandably, like JavaScript. Microsoft created TypeScript; Facebook introduced FlowType and ReasonML and also hipster languages such as Elm and PureScript took a lot of attraction. That led us to vibrant and different developer experiences, including typed and pure functional languages which compiled to JavaScript.</p>\n<h3>From Gulp to\u00a0Webpack</h3>\n<p>In 2015 we used gulp to automate some common task as compiling Sass, but in 2018 with tools like webpack, we do much more: js transpilers, code-splitting, tree-shaking, assets optimising and even machine learning to optimise code-splitting efficiently. We have so much power, so the code we write and the code we output is sometimes non-identical.</p>\n<h3>And back to my 2015 project\u00a0which:</h3>\n<ul>\n<li>doesn\u2019t have transpiler;</li>\n<li>gulp only minify my JS and compile SCSS\u00a0files;</li>\n<li>all my data comes from different services, and I can\u2019t use awesome redux-devtools to debug it when things go\u00a0wrong;</li>\n<li>have to remind my self not to use const and arrow functions otherwise IE11 users will suffer because there is no\u00a0babel.</li>\n</ul>\n<p>Only 36 months but today it feels like living in an entirely different world. I even don\u2019t want to mention all web platform APIs which arrived in this period. And to compare, Google Chrome released 23 versions in that time, Firefox 21, Edge was still in\u00a0beta.</p>\n<p>On the other hand, I often hear people complain about slow introduction and implementation of new browser or JavaScript features, but when we look back, we can see that this is clearly not the\u00a0case.</p>\n<blockquote>Twelve years later, the web continues to excite\u00a0me</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f73ea2de4ba0\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elements/three-years-in-frontend-feels-like-two-different-worlds-f73ea2de4ba0\">How the world of front-end development changed in just three years</a> was originally published in <a href=\"https://medium.com/elements\">Elements blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<p>Three years ago I worked on a big Angular project, which took like six months to finish. Nowadays I only maintain this project and maybe add a few small features every couple of months. The last time when I made some changes, I realised how massive the shift between 2015 and 2018 is. Things in the front-end world move fast, so often there is no time to\u00a0migrate.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UfGLUkWQ6Hw-LoldoDcwVw.jpeg\"></figure><h3>Angular to\u00a0React</h3>\n<p>Three years ago everyone was using Angular, and it was the framework that changed the way we think about client-side web applications. It added so many new concepts and features, but after that React came, and we had to re-think everything again. From components model ( I know, it kind of exists in Angular as directives), virtual-dom, one-direction data binding. React set new rules and ideas which even the current version of Angular\u00a0follows.</p>\n<h3>ES5 to ES\u00a02015</h3>\n<p>The long-awaited 6th version of JS arrived in 2015 and brought so many new features like classes, promises, generators, the list is enormous and took a long time to learn and adopt them in practice. Some of the features were influenced by people who come from other languages and platforms.</p>\n<h3>OOP to Functional programming</h3>\n<p>Somehow React, and ES2015 enforced functional programming, and we started to think about UI as a function of current application state, we begin to write small pure functions as components, trying to isolate side effects and use immutable data structures. ES2015 brought classes but also arrow functions; we prefer to compose functions instead of extending classes.</p>\n<h3>From MV* to Components and\u00a0Redux</h3>\n<p>As I mentioned early, React introduced to the masses components architecture, together with functional programming and uni-directional data-flow. Redux also changed the way we think about the application state. Instead of having different Angular services with handler data, we have a single source of truth. Redux made everything much simpler and easier to maintain and debug. The pattern is so powerful that we can see in other JS frameworks and even languages and platforms to adopt it: such as Swift and\u00a0Java.</p>\n<h3>New languages</h3>\n<p>As the web became the largest and most influential platform in the world, more and more developers started to build for it. And we all know that the only language on the web is JavaScript, which became the target language.</p>\n<p>Many new languages were born to improve the developer\u2019s experience since not all developers, understandably, like JavaScript. Microsoft created TypeScript; Facebook introduced FlowType and ReasonML and also hipster languages such as Elm and PureScript took a lot of attraction. That led us to vibrant and different developer experiences, including typed and pure functional languages which compiled to JavaScript.</p>\n<h3>From Gulp to\u00a0Webpack</h3>\n<p>In 2015 we used gulp to automate some common task as compiling Sass, but in 2018 with tools like webpack, we do much more: js transpilers, code-splitting, tree-shaking, assets optimising and even machine learning to optimise code-splitting efficiently. We have so much power, so the code we write and the code we output is sometimes non-identical.</p>\n<h3>And back to my 2015 project\u00a0which:</h3>\n<ul>\n<li>doesn\u2019t have transpiler;</li>\n<li>gulp only minify my JS and compile SCSS\u00a0files;</li>\n<li>all my data comes from different services, and I can\u2019t use awesome redux-devtools to debug it when things go\u00a0wrong;</li>\n<li>have to remind my self not to use const and arrow functions otherwise IE11 users will suffer because there is no\u00a0babel.</li>\n</ul>\n<p>Only 36 months but today it feels like living in an entirely different world. I even don\u2019t want to mention all web platform APIs which arrived in this period. And to compare, Google Chrome released 23 versions in that time, Firefox 21, Edge was still in\u00a0beta.</p>\n<p>On the other hand, I often hear people complain about slow introduction and implementation of new browser or JavaScript features, but when we look back, we can see that this is clearly not the\u00a0case.</p>\n<blockquote>Twelve years later, the web continues to excite\u00a0me</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f73ea2de4ba0\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elements/three-years-in-frontend-feels-like-two-different-worlds-f73ea2de4ba0\">How the world of front-end development changed in just three years</a> was originally published in <a href=\"https://medium.com/elements\">Elements blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": [
        "web-development",
        "front-end-development",
        "javascript",
        "frontend",
        "react"
      ]
    },
    {
      "title": "Building progressive web online store",
      "pubDate": "2018-01-31 17:53:49",
      "link": "https://medium.com/front-end-weekly/building-progressive-web-online-store-aedd5ebb15e9?source=rss-1086cf4b8abe------2",
      "guid": "https://medium.com/p/aedd5ebb15e9",
      "author": "Stoyan Delev",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*YJRqXPjW2il29oH1oUNJSw.png",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YJRqXPjW2il29oH1oUNJSw.png\"><figcaption>simple UI</figcaption></figure><p>Building online store is challenging, especially nowadays when everyone uses a mobile device; and because I like challenges I tried to build super fast and easy to use online shop. Here is how I\u00a0did:</p>\n<h4>Minimal dependencies</h4>\n<p>I want the users to load the page as quick as possible, sending less code, in that case, is important, that is why I use Preact instead React and Unistore instead Redux. Meanwhile, Braintree client library is super expensive ~200kb. I am still considering using WebPayments API instead Braintree, but for now, just lazyload it in the background.<br>My library code is: <a href=\"https://github.com/developit/preact\">Preact</a> + <a href=\"https://github.com/synacor/preact-i18n\">Preact-i18n </a>+ Preact-Router + <a href=\"https://github.com/developit/unistore\">Unistore</a> less than\u00a010kb</p>\n<h4>Code splitting</h4>\n<p>For creating the project, I use <a href=\"https://github.com/developit/preact-cli\">preact-cli</a> ( its similar to create-react-app but for Preact ) and code splitting is included in it, so splitting the code based on routes or components is straightforward.</p>\n<h4>Critical CSS</h4>\n<p>I use <a href=\"https://www.npmjs.com/package/webpack-plugin-critical\">Critical Webpack Plugin</a> for critical CSS. The plugin can be integrated quite easy to webpack. It automatically inlines critical CSS and lazy load the\u00a0rest.</p>\n<h4>Puppeteer\u200a\u2014\u200aprerender home\u00a0page</h4>\n<p>Preact CLI comes with prerender functionality; however, it doesn\u2019t work with dynamic content. Recently, Chrome Team introduced headless Chrome which is like a browser without shell. On top of it, there is a project named <a href=\"https://github.com/GoogleChrome/puppeteer/\">Puppeteer</a> ( nodejs API to handle chrome ). I run a script which opens the headless chrome, crawls the content and prepopulates the homepage ( only ) with products.</p>\n<h4>H2 +\u00a0gzip</h4>\n<p>Firebase hosting supports a lot of cool stuff like H2 and gzip, so no additional work is required, just upload the static file. Bonus: all content is delivered by Google\u2019s\u00a0CDN</p>\n<h4>ServiceWorker and\u00a0Caching</h4>\n<p>SW also comes with preact-cli, no need any additional configurations. For caching data I save all products in localStorage, so returned users don\u2019t need to wait for HTTP response.</p>\n<h4>WebP</h4>\n<p>WebP has slightly better compression and respectively size than JPG, so I serve webp images when the browser supports them. Also, using picture tag with multiple sources for the different dimension.</p>\n<h4>Form autofill</h4>\n<p><a href=\"https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\">Form autofill</a> is a must for any online store, plus removing registration process should make checkout process faster. As I mentioned above, I am looking into WebPayments API as\u00a0well.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*x5-DD9b-1EwD_njFF9BZ-A.png\"></figure><p>Lighthouse score 84 is not so bad but still some work needs to be done.<br>I am quite happy with the fact that the website is working even on IE11 ( also tested on mobile Firefox, Samsung, Edge and Safari ) so I managed to execute the first and most essential element of PWA: Progressive<br>The code of the project can be found <a href=\"https://github.com/mutebg/online-store\">here</a>, is far away from beautiful, but it is at least\u00a0working.</p>\n<p><a href=\"https://medium.com/@mutebg/serverless-online-store-with-firebase-1f7c5296981c\">Serverless online store with Firebase</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=aedd5ebb15e9\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/front-end-weekly/building-progressive-web-online-store-aedd5ebb15e9\">Building progressive web online store</a> was originally published in <a href=\"https://medium.com/front-end-weekly\">Frontend Weekly</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YJRqXPjW2il29oH1oUNJSw.png\"><figcaption>simple UI</figcaption></figure><p>Building online store is challenging, especially nowadays when everyone uses a mobile device; and because I like challenges I tried to build super fast and easy to use online shop. Here is how I\u00a0did:</p>\n<h4>Minimal dependencies</h4>\n<p>I want the users to load the page as quick as possible, sending less code, in that case, is important, that is why I use Preact instead React and Unistore instead Redux. Meanwhile, Braintree client library is super expensive ~200kb. I am still considering using WebPayments API instead Braintree, but for now, just lazyload it in the background.<br>My library code is: <a href=\"https://github.com/developit/preact\">Preact</a> + <a href=\"https://github.com/synacor/preact-i18n\">Preact-i18n </a>+ Preact-Router + <a href=\"https://github.com/developit/unistore\">Unistore</a> less than\u00a010kb</p>\n<h4>Code splitting</h4>\n<p>For creating the project, I use <a href=\"https://github.com/developit/preact-cli\">preact-cli</a> ( its similar to create-react-app but for Preact ) and code splitting is included in it, so splitting the code based on routes or components is straightforward.</p>\n<h4>Critical CSS</h4>\n<p>I use <a href=\"https://www.npmjs.com/package/webpack-plugin-critical\">Critical Webpack Plugin</a> for critical CSS. The plugin can be integrated quite easy to webpack. It automatically inlines critical CSS and lazy load the\u00a0rest.</p>\n<h4>Puppeteer\u200a\u2014\u200aprerender home\u00a0page</h4>\n<p>Preact CLI comes with prerender functionality; however, it doesn\u2019t work with dynamic content. Recently, Chrome Team introduced headless Chrome which is like a browser without shell. On top of it, there is a project named <a href=\"https://github.com/GoogleChrome/puppeteer/\">Puppeteer</a> ( nodejs API to handle chrome ). I run a script which opens the headless chrome, crawls the content and prepopulates the homepage ( only ) with products.</p>\n<h4>H2 +\u00a0gzip</h4>\n<p>Firebase hosting supports a lot of cool stuff like H2 and gzip, so no additional work is required, just upload the static file. Bonus: all content is delivered by Google\u2019s\u00a0CDN</p>\n<h4>ServiceWorker and\u00a0Caching</h4>\n<p>SW also comes with preact-cli, no need any additional configurations. For caching data I save all products in localStorage, so returned users don\u2019t need to wait for HTTP response.</p>\n<h4>WebP</h4>\n<p>WebP has slightly better compression and respectively size than JPG, so I serve webp images when the browser supports them. Also, using picture tag with multiple sources for the different dimension.</p>\n<h4>Form autofill</h4>\n<p><a href=\"https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\">Form autofill</a> is a must for any online store, plus removing registration process should make checkout process faster. As I mentioned above, I am looking into WebPayments API as\u00a0well.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*x5-DD9b-1EwD_njFF9BZ-A.png\"></figure><p>Lighthouse score 84 is not so bad but still some work needs to be done.<br>I am quite happy with the fact that the website is working even on IE11 ( also tested on mobile Firefox, Samsung, Edge and Safari ) so I managed to execute the first and most essential element of PWA: Progressive<br>The code of the project can be found <a href=\"https://github.com/mutebg/online-store\">here</a>, is far away from beautiful, but it is at least\u00a0working.</p>\n<p><a href=\"https://medium.com/@mutebg/serverless-online-store-with-firebase-1f7c5296981c\">Serverless online store with Firebase</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=aedd5ebb15e9\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/front-end-weekly/building-progressive-web-online-store-aedd5ebb15e9\">Building progressive web online store</a> was originally published in <a href=\"https://medium.com/front-end-weekly\">Frontend Weekly</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": [
        "firebase",
        "web-development",
        "react",
        "javascript",
        "reactjs"
      ]
    },
    {
      "title": "Serverless online store with Firebase",
      "pubDate": "2018-01-31 17:53:40",
      "link": "https://medium.com/@mutebg/serverless-online-store-with-firebase-1f7c5296981c?source=rss-1086cf4b8abe------2",
      "guid": "https://medium.com/p/1f7c5296981c",
      "author": "Stoyan Delev",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*_dwo62uQRKODRRVyi2YOiw.png",
      "description": "\n<p><em>Background story: My brother has an online business, a small shop. It was ready-to-use PHP solution, but during the years cost me a lot of time to maintain it, and you can imagine this is a tedious task. Thus one day I decided to simplify the shop and to rebuild it using a modern stack. <br>But what is a modern stack? I wanted to move out of digitalocean virtual machine and unmaintainable PHP CMS which didn\u2019t give enough options, and the same time to reduce the costs. So firebase and custom made preact solution seemed as a good\u00a0choice.</em></p>\n<p>Nowadays Firebase provides a lot of features ( if you are not familiar with them I suggest go and check them out ) In this post I am going to talk about: Cloud Functions, Firestore database, Auth + using MailGun and Braintree.</p>\n<p>Firebase Functions are straightforward concept: you write a JS function that responds to an event ( for example HTTP request or database change\u00a0)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_dwo62uQRKODRRVyi2YOiw.png\"><figcaption>checkout workflow</figcaption></figure><h4>HTTP trigger as Rest\u00a0API</h4>\n<p>To make rest like API firebase gives HTTP triggers. The API is similar to ExpressJS one, in fact, you can quickly put the whole expresjs server to handle all HTTP requests, and Idid exactly that.<br>Building such a simple online store I needed few API points: list of products, checkout ( Braintree ) and shipping\u00a0module</p>\n<a href=\"https://medium.com/media/5acc503d444ae3b8ecff395d17e56d54/href\">https://medium.com/media/5acc503d444ae3b8ecff395d17e56d54/href</a><p><a href=\"https://firebase.google.com/docs/functions/http-events\">mode information about HTTP\u00a0triggers</a></p>\n<h4>Braintree for\u00a0payments</h4>\n<p>Braintree was the first choice for payment providers since supports PayPal ( and we all know that PayPal integration is painful ). It has nodejs module, so integration to cloud functions is easy, all I did is create two API points <strong>/token </strong>( generates a token for the frontend ) and <strong>/checkout</strong> ( process payment and saves the order in DB\u00a0)</p>\n<p><a href=\"https://github.com/mutebg/online-store/blob/4089b0117966bec18747e3ef7e0aa438892f7ee4/functions/checkout.js\">mutebg/online-store</a></p>\n<h4>Firebase Firestore for storing\u00a0orders</h4>\n<p>Firestore is the new generation NoSQL database. Since it is document based, I just insert all orders as JSON object into\u00a0it.</p>\n<h4>Firebase Functions +\u00a0MailGun</h4>\n<p>Every time new order is added into Firestore database it triggers a function which sends a confirmation email to the customer and shop administrator. For sending emails I use MailGun, the email service provides 10000 free emails per month which are enough for a small business.</p>\n<a href=\"https://medium.com/media/359b763158833aeaf3c44c4e18fad715/href\">https://medium.com/media/359b763158833aeaf3c44c4e18fad715/href</a><h4>Firebase functions for resizing and optimising images</h4>\n<p>Another challenge that I had is to provide responsive pictures in different formats ( jpg / webp ), actually this was simpler than expected. Firebase has a trigger which activates every time a new file is uploaded to Firebase Storage. As you may guess I just have to upload my large pictures to firebase storage and all the images will be resized and converted to\u00a0webp.</p>\n<a href=\"https://medium.com/media/1015a0ab5ca0529bc252f66e46fa29b1/href\">https://medium.com/media/1015a0ab5ca0529bc252f66e46fa29b1/href</a><p>rest of the <a href=\"https://github.com/mutebg/online-store/blob/master/functions/images.js\">resizeImage function</a></p>\n<h4>Firebase Auth</h4>\n<p>Building authentication is unpleasant, I have done it many times and am quite happy that nowadays I can use a provider for that. I needed user auth for administrators of the shop and Firebase Auth cames naturally as\u00a0option</p>\n<p>I must mention some other cool features of Firebase functions like CDN, free SSL, http2, static assets hosting. Hence using services like Firebase makes the development process more enjoyable. I love the fact I don\u2019t have to maintain any virtual machines so can focus on the things I\u00a0like.</p>\n<p>All examples: <a href=\"https://github.com/firebase/functions-samples\">https://github.com/firebase/functions-samples</a><br>Full code of the project: <a href=\"https://github.com/mutebg/online-store/\">https://github.com/mutebg/online-store/</a></p>\n<p><a href=\"https://medium.com/@mutebg/building-progressive-web-online-store-aedd5ebb15e9\">Building progressive web online store - Stoyan Delev - Medium</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1f7c5296981c\" width=\"1\" height=\"1\">\n",
      "content": "\n<p><em>Background story: My brother has an online business, a small shop. It was ready-to-use PHP solution, but during the years cost me a lot of time to maintain it, and you can imagine this is a tedious task. Thus one day I decided to simplify the shop and to rebuild it using a modern stack. <br>But what is a modern stack? I wanted to move out of digitalocean virtual machine and unmaintainable PHP CMS which didn\u2019t give enough options, and the same time to reduce the costs. So firebase and custom made preact solution seemed as a good\u00a0choice.</em></p>\n<p>Nowadays Firebase provides a lot of features ( if you are not familiar with them I suggest go and check them out ) In this post I am going to talk about: Cloud Functions, Firestore database, Auth + using MailGun and Braintree.</p>\n<p>Firebase Functions are straightforward concept: you write a JS function that responds to an event ( for example HTTP request or database change\u00a0)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_dwo62uQRKODRRVyi2YOiw.png\"><figcaption>checkout workflow</figcaption></figure><h4>HTTP trigger as Rest\u00a0API</h4>\n<p>To make rest like API firebase gives HTTP triggers. The API is similar to ExpressJS one, in fact, you can quickly put the whole expresjs server to handle all HTTP requests, and Idid exactly that.<br>Building such a simple online store I needed few API points: list of products, checkout ( Braintree ) and shipping\u00a0module</p>\n<a href=\"https://medium.com/media/5acc503d444ae3b8ecff395d17e56d54/href\">https://medium.com/media/5acc503d444ae3b8ecff395d17e56d54/href</a><p><a href=\"https://firebase.google.com/docs/functions/http-events\">mode information about HTTP\u00a0triggers</a></p>\n<h4>Braintree for\u00a0payments</h4>\n<p>Braintree was the first choice for payment providers since supports PayPal ( and we all know that PayPal integration is painful ). It has nodejs module, so integration to cloud functions is easy, all I did is create two API points <strong>/token </strong>( generates a token for the frontend ) and <strong>/checkout</strong> ( process payment and saves the order in DB\u00a0)</p>\n<p><a href=\"https://github.com/mutebg/online-store/blob/4089b0117966bec18747e3ef7e0aa438892f7ee4/functions/checkout.js\">mutebg/online-store</a></p>\n<h4>Firebase Firestore for storing\u00a0orders</h4>\n<p>Firestore is the new generation NoSQL database. Since it is document based, I just insert all orders as JSON object into\u00a0it.</p>\n<h4>Firebase Functions +\u00a0MailGun</h4>\n<p>Every time new order is added into Firestore database it triggers a function which sends a confirmation email to the customer and shop administrator. For sending emails I use MailGun, the email service provides 10000 free emails per month which are enough for a small business.</p>\n<a href=\"https://medium.com/media/359b763158833aeaf3c44c4e18fad715/href\">https://medium.com/media/359b763158833aeaf3c44c4e18fad715/href</a><h4>Firebase functions for resizing and optimising images</h4>\n<p>Another challenge that I had is to provide responsive pictures in different formats ( jpg / webp ), actually this was simpler than expected. Firebase has a trigger which activates every time a new file is uploaded to Firebase Storage. As you may guess I just have to upload my large pictures to firebase storage and all the images will be resized and converted to\u00a0webp.</p>\n<a href=\"https://medium.com/media/1015a0ab5ca0529bc252f66e46fa29b1/href\">https://medium.com/media/1015a0ab5ca0529bc252f66e46fa29b1/href</a><p>rest of the <a href=\"https://github.com/mutebg/online-store/blob/master/functions/images.js\">resizeImage function</a></p>\n<h4>Firebase Auth</h4>\n<p>Building authentication is unpleasant, I have done it many times and am quite happy that nowadays I can use a provider for that. I needed user auth for administrators of the shop and Firebase Auth cames naturally as\u00a0option</p>\n<p>I must mention some other cool features of Firebase functions like CDN, free SSL, http2, static assets hosting. Hence using services like Firebase makes the development process more enjoyable. I love the fact I don\u2019t have to maintain any virtual machines so can focus on the things I\u00a0like.</p>\n<p>All examples: <a href=\"https://github.com/firebase/functions-samples\">https://github.com/firebase/functions-samples</a><br>Full code of the project: <a href=\"https://github.com/mutebg/online-store/\">https://github.com/mutebg/online-store/</a></p>\n<p><a href=\"https://medium.com/@mutebg/building-progressive-web-online-store-aedd5ebb15e9\">Building progressive web online store - Stoyan Delev - Medium</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1f7c5296981c\" width=\"1\" height=\"1\">\n",
      "enclosure": {},
      "categories": [
        "serverless",
        "online-business",
        "web-development",
        "firebase",
        "javascript"
      ]
    },
    {
      "title": "How to start your next front end project",
      "pubDate": "2018-01-02 20:23:33",
      "link": "https://medium.com/@mutebg/how-to-start-your-next-front-end-project-15f5480b1b0?source=rss-1086cf4b8abe------2",
      "guid": "https://medium.com/p/15f5480b1b0",
      "author": "Stoyan Delev",
      "thumbnail": "https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=15f5480b1b0",
      "description": "\n<p>Starting a new project is always exciting, but also might be tedious with all preparations which need to be done at the beginning, or you can miss something important that affects your work for next couple of months. Recently I have been thinking about my process when I start a new project. So there are my few tips and things to think before kick off next\u00a0one:</p>\n<h4>Talk with your UX/Designer</h4>\n<p>As a frontend/UI developer, you must be involved in the design process, that means you should check what with your colleagues are doing. Discussing with them once a day usually is enough. I see testing for accessibility or performance issues that the design might cause, or just debating small implementation details. I have been in a situation where spent days trying to implement something, and in the end, the result was not good enough, so I went to my designer, discussed it, changed the design with few pixels and the problem become easy to solve. So when you see a problem you can see: \u201cHey if you move this element to the right will save me X days work\u201d, \u201cif you replace this with that, the performance will be much better\u201d, \u201cif the animation starts from here it will be much smoother on mobile device\u201d\u00a0. However, the idea is not to be lazy and do the easiest job; our goal is to deliver excellent product and delivery it on\u00a0time.</p>\n<h4>Architecture</h4>\n<p>I am pretty sure that you are going to use HTML/CSS &amp; JS but how you are going to use them? Are going to build SPA with Angular + GraphQL or PHP Laravel website which server-side render templates. Usually, that is the first and point you have to decide, what you need, how dynamic is the website, what is the backend ( if you have\u00a0).</p>\n<h4>Browser support</h4>\n<p>Nothing matters if no one of your users cannot open and use your site. You are not building products for yourself. You are making it for users/customers. If you are doing a redesign of an old website, check out statistics so you can have an overview of currently used browsers. After that, you can decide: Which are the browsers you are going to support, what is the behaviour when the browser is not supported (empty page, partially broken page ), What are the fallbacks and what is the impact to support those browsers. Think about progressive enhancement.</p>\n<h4>CSS Process</h4>\n<p>Might sound funny for many people but CSS is hard, and we need a process for it from file organisation to way of structuring and naming classes. There are many solutions for that like BEM, Atomic, OOCSS, SMACSS, CSS-in-JS. If you are using a component-based framework like React maybe style encapsulation in component level is important so can go for CSS-in-js like solution ( styled-components, glamorous ), for PHP/Django I prefer to use BEM. Web components also can give you encapsulation using shadow dom but unfortunately is not supported everywhere yet. There is no silver bullet, use whatever fit your needs, choose one and stick with it. Choose you preprocessor if you need\u00a0one.</p>\n<h4>Javascript Libraries</h4>\n<p>I always start with: do I need that library or framework, is not because I do not like JS ( actually I love it). I just don\u2019t want to add unnecessary things to my page weight, so every library has been doubted before added to my project. Nowadays, for many projects maybe we do not need jquery or react or whatever-today-is-modern-in-js-world. Often I like to refer to <a href=\"http://youmightnotneedjquery.com/\">http://youmightnotneedjquery.com/</a> and just go with simple solution<br>Depends on the size of organisation you might not want to stick to any modern framework, that is the reason why many large companies choice Web Components, instead of going with React or\u00a0Angular.</p>\n<h4>Performance &amp; Accessibility</h4>\n<p>Consider those two, are you going to have some performance budget, what is your target audience. What kind of devices your customers use and when. Start with optimisations like serving correct image formats and size, adding gzip ( or another compression) on assets. Accessibility is essential for many users, don\u2019t underestimate it, many reports show that 1/5 of people have some kind of that\u00a0problem.</p>\n<h4>File structure and organisation</h4>\n<p>How are you going to organise your files, based on features, based on type? What about other assets like icons, fonts, images\u00a0etc.?</p>\n<h4>Setup build\u00a0tool</h4>\n<p>There are plenty of choices depends on your architecture. If you want to use the modern JS (es2015+) probably, you need transpiler like babel. If you need external modules, you might need too like Webpack, Browserify, Rollup. Also, you might need some task runner like Gulp, Grunt ( does someone still use it\u00a0? ) or just NPM scrips for that. CSS preprocessors ( SCSS, Less ) can be part of this. Also image resizing, compressing, optimising, creating font icons and whatever can be automated.</p>\n<h4>Web fonts</h4>\n<p>Nowadays almost every website includes a custom web font, and it is critical to know how to serve and prioritise those fonts. Maybe not all fonts are needed all time, so some of them may be loaded asynchronously, also is a best practice approach to optimise the fonts and serve in the right format, woff2 has high compression but is not supported in some old browsers. Think about font fallback when your font cannot load or loading takes too long, it is super annoying when you can see the page because of font loads too long, having timeout and fallback\u00a0helps.</p>\n<h4>Icon system</h4>\n<p>SVG icons, font icons, just images? There are few options for working with icons: making image sprite, font icons or use of svgs. You can integrate that process part of your build/task tools so don\u2019t have to do manual work.<br>( In a project I created a gulp task which creates font-icon based on folder with svgs, so everyone even the designer can drop an icon in the projects and automatically appeared in the font on my next git\u00a0pull)</p>\n<h4>Basic scaffolding</h4>\n<p>Using reset.css or normalize.css, set up a base font size, line height. Define variables with colours, sizes, padding, media query breakpoints. Create a grid, basic styling like h1-h6. It is useful to define those things up front and reuse them over\u00a0pages.</p>\n<h4>Common components</h4>\n<p>Create reusable components between pages, try to find patterns, speak with your designer about that; usually, the designers also want everything to be consistent across pages, so it is not going to be challenging to help you with that. Can be small things like buttons, links, inputs, labels, and headings to more complex components like media list, headers, carousels. Also, some components might seem similar but they are not, sometimes is better to duplicate components instead of creating wrong / high abstraction. Duplication is far cheaper than the wrong abstraction</p>\n<h4>Env variables</h4>\n<p>Make a distinction between production and dev environment. Maybe those environments use different databases, APIs, and services. Don\u2019t leave that for the last day before going live, and realise that you have a lot of hardcoded variables ( for example URL to a rest API ). Also in production is likely your code to be minified and compressed so setup those things from the beginning.</p>\n<h4>Additional</h4>\n<p>Depends on the project maybe you need things like linters and code formatters, so is better if you agree with your team and configure those from the start, so everyone of that team is aligned with the rules. In some projects setup style guide also might be super\u00a0useful.</p>\n<p>That was my list, maybe is not complete, nor in the right order or even not the correct things to do but it is just my experience, so your suggestions are always welcome in the\u00a0comments</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=15f5480b1b0\" width=\"1\" height=\"1\">\n",
      "content": "\n<p>Starting a new project is always exciting, but also might be tedious with all preparations which need to be done at the beginning, or you can miss something important that affects your work for next couple of months. Recently I have been thinking about my process when I start a new project. So there are my few tips and things to think before kick off next\u00a0one:</p>\n<h4>Talk with your UX/Designer</h4>\n<p>As a frontend/UI developer, you must be involved in the design process, that means you should check what with your colleagues are doing. Discussing with them once a day usually is enough. I see testing for accessibility or performance issues that the design might cause, or just debating small implementation details. I have been in a situation where spent days trying to implement something, and in the end, the result was not good enough, so I went to my designer, discussed it, changed the design with few pixels and the problem become easy to solve. So when you see a problem you can see: \u201cHey if you move this element to the right will save me X days work\u201d, \u201cif you replace this with that, the performance will be much better\u201d, \u201cif the animation starts from here it will be much smoother on mobile device\u201d\u00a0. However, the idea is not to be lazy and do the easiest job; our goal is to deliver excellent product and delivery it on\u00a0time.</p>\n<h4>Architecture</h4>\n<p>I am pretty sure that you are going to use HTML/CSS &amp; JS but how you are going to use them? Are going to build SPA with Angular + GraphQL or PHP Laravel website which server-side render templates. Usually, that is the first and point you have to decide, what you need, how dynamic is the website, what is the backend ( if you have\u00a0).</p>\n<h4>Browser support</h4>\n<p>Nothing matters if no one of your users cannot open and use your site. You are not building products for yourself. You are making it for users/customers. If you are doing a redesign of an old website, check out statistics so you can have an overview of currently used browsers. After that, you can decide: Which are the browsers you are going to support, what is the behaviour when the browser is not supported (empty page, partially broken page ), What are the fallbacks and what is the impact to support those browsers. Think about progressive enhancement.</p>\n<h4>CSS Process</h4>\n<p>Might sound funny for many people but CSS is hard, and we need a process for it from file organisation to way of structuring and naming classes. There are many solutions for that like BEM, Atomic, OOCSS, SMACSS, CSS-in-JS. If you are using a component-based framework like React maybe style encapsulation in component level is important so can go for CSS-in-js like solution ( styled-components, glamorous ), for PHP/Django I prefer to use BEM. Web components also can give you encapsulation using shadow dom but unfortunately is not supported everywhere yet. There is no silver bullet, use whatever fit your needs, choose one and stick with it. Choose you preprocessor if you need\u00a0one.</p>\n<h4>Javascript Libraries</h4>\n<p>I always start with: do I need that library or framework, is not because I do not like JS ( actually I love it). I just don\u2019t want to add unnecessary things to my page weight, so every library has been doubted before added to my project. Nowadays, for many projects maybe we do not need jquery or react or whatever-today-is-modern-in-js-world. Often I like to refer to <a href=\"http://youmightnotneedjquery.com/\">http://youmightnotneedjquery.com/</a> and just go with simple solution<br>Depends on the size of organisation you might not want to stick to any modern framework, that is the reason why many large companies choice Web Components, instead of going with React or\u00a0Angular.</p>\n<h4>Performance &amp; Accessibility</h4>\n<p>Consider those two, are you going to have some performance budget, what is your target audience. What kind of devices your customers use and when. Start with optimisations like serving correct image formats and size, adding gzip ( or another compression) on assets. Accessibility is essential for many users, don\u2019t underestimate it, many reports show that 1/5 of people have some kind of that\u00a0problem.</p>\n<h4>File structure and organisation</h4>\n<p>How are you going to organise your files, based on features, based on type? What about other assets like icons, fonts, images\u00a0etc.?</p>\n<h4>Setup build\u00a0tool</h4>\n<p>There are plenty of choices depends on your architecture. If you want to use the modern JS (es2015+) probably, you need transpiler like babel. If you need external modules, you might need too like Webpack, Browserify, Rollup. Also, you might need some task runner like Gulp, Grunt ( does someone still use it\u00a0? ) or just NPM scrips for that. CSS preprocessors ( SCSS, Less ) can be part of this. Also image resizing, compressing, optimising, creating font icons and whatever can be automated.</p>\n<h4>Web fonts</h4>\n<p>Nowadays almost every website includes a custom web font, and it is critical to know how to serve and prioritise those fonts. Maybe not all fonts are needed all time, so some of them may be loaded asynchronously, also is a best practice approach to optimise the fonts and serve in the right format, woff2 has high compression but is not supported in some old browsers. Think about font fallback when your font cannot load or loading takes too long, it is super annoying when you can see the page because of font loads too long, having timeout and fallback\u00a0helps.</p>\n<h4>Icon system</h4>\n<p>SVG icons, font icons, just images? There are few options for working with icons: making image sprite, font icons or use of svgs. You can integrate that process part of your build/task tools so don\u2019t have to do manual work.<br>( In a project I created a gulp task which creates font-icon based on folder with svgs, so everyone even the designer can drop an icon in the projects and automatically appeared in the font on my next git\u00a0pull)</p>\n<h4>Basic scaffolding</h4>\n<p>Using reset.css or normalize.css, set up a base font size, line height. Define variables with colours, sizes, padding, media query breakpoints. Create a grid, basic styling like h1-h6. It is useful to define those things up front and reuse them over\u00a0pages.</p>\n<h4>Common components</h4>\n<p>Create reusable components between pages, try to find patterns, speak with your designer about that; usually, the designers also want everything to be consistent across pages, so it is not going to be challenging to help you with that. Can be small things like buttons, links, inputs, labels, and headings to more complex components like media list, headers, carousels. Also, some components might seem similar but they are not, sometimes is better to duplicate components instead of creating wrong / high abstraction. Duplication is far cheaper than the wrong abstraction</p>\n<h4>Env variables</h4>\n<p>Make a distinction between production and dev environment. Maybe those environments use different databases, APIs, and services. Don\u2019t leave that for the last day before going live, and realise that you have a lot of hardcoded variables ( for example URL to a rest API ). Also in production is likely your code to be minified and compressed so setup those things from the beginning.</p>\n<h4>Additional</h4>\n<p>Depends on the project maybe you need things like linters and code formatters, so is better if you agree with your team and configure those from the start, so everyone of that team is aligned with the rules. In some projects setup style guide also might be super\u00a0useful.</p>\n<p>That was my list, maybe is not complete, nor in the right order or even not the correct things to do but it is just my experience, so your suggestions are always welcome in the\u00a0comments</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=15f5480b1b0\" width=\"1\" height=\"1\">\n",
      "enclosure": {},
      "categories": ["web-development"]
    },
    {
      "title": "Fronteers 2017",
      "pubDate": "2017-10-13 00:00:00",
      "link": "https://medium.com/elements/fronteers-2017-46d6006e5143?source=rss-1086cf4b8abe------2",
      "guid": "https://medium.com/p/46d6006e5143",
      "author": "Stoyan Delev",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*AfA4TwhCq2NybgUUmvamNw.jpeg",
      "description": "\n<p><em>Written by </em><a href=\"https://medium.com/u/4b2e69af102e\">Luis Miguel Fern\u00e1ndez</a><em>, </em><a href=\"https://medium.com/u/7cfbd7b11755\"><em>Luis Garc\u00eda Estrades</em></a><em>, Ricardo Ambrogi and </em><a href=\"https://medium.com/u/1086cf4b8abe\"><em>Stoyan\u00a0Delev</em></a></p>\n<p><em>On Thursday 5th and Friday October 6th, four of our front-enders (the two Luises, Ricardo and Stoyan) went to </em><a href=\"https://fronteers.nl/congres/2017\"><em>Fronteers Conf 2017</em></a><em>, the tenth edition of the event already, in the beautiful </em><a href=\"https://www.pathe.nl/bioscoop/tuschinski\"><em>Path\u00e9 Tuschinski theatre</em></a><em> in Amsterdam. In this blog post they discuss the talks they liked the\u00a0most.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*AfA4TwhCq2NybgUUmvamNw.jpeg\"></figure><h3>Ricardo</h3>\n<h4>A Modern Front-end Workflow</h4>\n<p>Every front-end developer makes use of <a href=\"https://developers.google.com/web/tools/chrome-devtools/\">DevTools</a> on daily basis, but just a few (or maybe just <a href=\"https://twitter.com/umaar?lang=en\">Umar Hansa</a>) know how to make fully use of it. And because of that, Umar Hansa was in charge of speaking about DevTools at Fronteers 2017. When introduced, he was referred as the \u2018one\u2019 who knows more about DevTools than its own creators. Umar showed us a few hidden secrets that are available in DevTools and how to make most use of them. Umar taught us how to perform audits, which help us fixing and finding problems that might affect our websites, including accessibility issues.</p>\n<h4>Debugging Accessibility</h4>\n<p>Talking about accessibility, this was the subject of <a href=\"https://twitter.com/sundress?lang=en\">Alice Boxhall\u2019s</a> talk. Alice showed us a funny example of a website that accepted no clicks at all: navigating was triggered by hovering at determined things, which was obviously not accessible at all. Alice tried to show us how disabled people use the web and how to make the websites we develop better for them. She elaborated on Umar\u2019s talk, by giving us a more in-depth example on how to use DevTools\u2019 new features which can help us debug and understand accessibility of the websites we develop at Elements.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*w87grOaA1SpnLk0uX1QFZw.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zjTqeoDkhggyyITH9xUvow.jpeg\"></figure><h3>Stoyan</h3>\n<h4>WebAssembly 101</h4>\n<p>This talk by <a href=\"https://twitter.com/AshKyd\">Ash Kyd</a> was about <a href=\"http://webassembly.org/\">WebAssembly</a> (a.k.a. wasm). It is a new standard which allows the browsers to \u201cload\u201d and \u201crun\u201d assembly-like code. The performance of web assembly is near-native since browsers do not need to parse, optimize and compile JavaScript. WebAssembly can be compiled from languages like C, C++, Rust and there are also experiments with Python, C#, etc. So everyone can write browser code in the preferred language and compile to wasm. But the main idea of it is not to replace JavaScript. Actually in most cases you will run both JavaScript and wasm in the same app/website. WebAssembly will open lots of doors for developers, things like image/video processing, games, and AI in the browser will become more and more\u00a0common.</p>\n<h4>Caches all the way\u00a0down</h4>\n<p>As we all know caching is one of the two most difficult things in software development. <a href=\"https://twitter.com/yoavweiss\">Yoav Weiss</a> managed to give a great talk about the difficulties and weird behavior of caches in the browser. Starting from in-memory cache, which is the fastest, and basically store data for the same resources. For example, if you request an image twice from a page, the second request will be returned immediately from memory\u00a0cache.</p>\n<p>The next level of caching is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">service worker</a>: kind of a proxy/middleware, which can intercept all HTTP requests and put them in a cache. Server workers can be programmed, so it is up to you which request to be cached and when. Next layer is HTTP cache which follows HTTP semantics, also allows resources to be reused. So an image from page A can be cached and reused on page B. And here comes the weirdest part: there a plenty of directives and combinations with confusing names, no-store, no-cache, immutable, must-revalidate, max-age, etag, public, private. On top of that there is HTTP/2 push cache, where push resources are stored as part of a push session. In conclusion: caching on the web is not easy, but can achieve serious performance improvements.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bXM1iXq88_0WCdtDsEygXA.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*AL2A5asjCRo7pojVPrjTeA.jpeg\"></figure><h3>Luis Mi</h3>\n<h4>Impostor Syndrome and Individual Competence</h4>\n<p>This talk by <a href=\"https://twitter.com/jesslynnrose\">Jessica Rose</a> focuses on how the <a href=\"https://en.wikipedia.org/wiki/Impostor_syndrome\">impostor syndrome</a> and the <a href=\"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect\">Dunning-Kruger effect</a> work to undermine our estimation of our individual skills. In short, the impostor syndrome is a concept describing individuals who are marked by an inability to internalize their accomplishments and a persistent fear of being exposed as a \u201cfraud\u201d. Or, to explain it plain words: \u201cYour brain uses bad data to build worse conclusions, and then becomes attached to those.\u201d This usually means that you have a feeling that you don\u2019t belong, that you are not good at doing something, that your boss is going to fire you and you will end up living under a\u00a0bridge.</p>\n<p>This can seem like a big deal for the average developer, but in fact is something widely present in the nowadays society, present in most working environments and it\u2019s -usually- rather harmless, though it\u2019s more common for minorities, because the feeling of not belonging could prove to be more relevant. In this talk Jessica Rose tells us that there are studies that point out a couple of issues that impostor syndrome creates for\u00a0you:</p>\n<ul>\n<li>Feelings of inadequacy</li>\n<li>Avoiding displays of target\u00a0skills.</li>\n</ul>\n<p>But in the other hand, it boosts soft\u00a0skills:</p>\n<ul>\n<li>Use of charm to improve social mitigation</li>\n<li>Increased diligence and dedication, to compensate for your feeling of lack of\u00a0skill</li>\n</ul>\n<p>Unluckily, the imposter syndrome, as most of cognitive biases, is something that it\u2019s not really fixable. One of the things that you can do to improve is getting better data to compensate the \u201cbad data\u201d your brain is gathering. For example things like getting a certification on your skills, or start a new project that is more compelling.</p>\n<p>Jessica also gave us some hints to deal with people who suffer from the impostor syndrome. Although it\u2019s mainly applicable to any professional interaction with anyone in your team, to make everything better for others, not only the ones with the impostor syndrome. So, summarizing, do not, ever, tell someone they have impostor syndrome, instead:</p>\n<ul>\n<li>Give positive meaningful and actionable feedback;</li>\n<li>Talk about your own feelings and fears when you feel comfortable doing\u00a0so.</li>\n</ul>\n<h4>The Landscape of Front-End Testing</h4>\n<p>This talk from <a href=\"https://twitter.com/aliciability\">Alicia Sedlock</a> covers the breadth of testing strategies available to front-end developers now, their benefits, and considerations before integrating them into your applications. She explains that you should automate as much as possible in the development cycle and points out six areas of testing that are relevant to some extent, and divides them in old school (the classical sense of testing which have been around for some time in several other technologies already) and a new school of\u00a0testing:</p>\n<p>Old school:</p>\n<ul>\n<li>\n<strong>Unit tests</strong> are to ensure small pieces of code work as expected and independently. Most of the time, it means that given one single input, you should test that you end up with a one and single output. She provides as well some examples of big players that we can find around: Jasmine, Mocha, QUnit, Chai, Sinon and Webdriver.io;</li>\n<li>\n<strong>Integration tests</strong> check that all the small pieces play well together in the bigger picture. It\u2019s a step ahead of Unit testing and usually you should test also the side effects that might happen in that \u201cbigger\u201d piece of code. So most of the time you should check several inputs, several outputs, and everything that might happen in\u00a0between;</li>\n<li>\n<strong>Acceptance testing</strong> makes sure that we can accomplish major tasks. Most of the time this is being taken care of by a QA team, but they can be automated as well. You should check that a whole user story can be started and finished, regardless of how it is technically built. A tool that has been around helping with this kinds of testing is Selenium, but Alicia provides some more modern examples, like Jasmine-integration, Karma or Nightwatch.</li>\n</ul>\n<p>New school:</p>\n<ul>\n<li>\n<strong>Visual regression testing</strong> has recently started gaining popularity\u200a\u2014\u200aand for good reason. In its most basic form, it\u2019s a series of tests that run through your site, take screenshots of various components, compare those screenshots against baseline images and alert you when things change. Some of the visual regression tools that she lists are the following: PhantomCSS, BackstopJS, Wraith, Webdriver.io and Percy.io.</li>\n<li>\n<strong>Accessibility tests</strong> compare your site against accessibility standards. Accessibility tests are a subset of usability testing where the users under consideration have disabilities that affect how they use the web. The end goal, in both usability and accessibility, is to discover how easily people can use a website and feed that information back into improving future designs and implementations. Some tools that might help with this, are: a11y (with grunt-a11y), Pa11y, react-a11y.</li>\n<li>\n<strong>Performance testing</strong> keeps your project honest about possible performance issues. In this case you should establish a performance budget, and then, once those specific goals are set, you stick to them. Anytime you want to add something to an application, you need to ensure it stays within your budget. You can go with one of these three options if something does not fit within the budget: optimize an existing feature or asset on the page, remove an existing feature or asset from the page, or don\u2019t add the new feature or asset at\u00a0all.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8TJlNQkQSboOD5Q_eERYag.jpeg\"></figure><h3>Luis G</h3>\n<h4>1Up Your Writing with Plain\u00a0Language</h4>\n<p><a href=\"https://twitter.com/handcoding\">Ashley Bischoff</a> explained the importance of communicating in the simplest way possible. Often we have to document or write reports and we should put our best effort to write in a clear way. Because, the ones reading our documents might not be familiar with the subject matter or don\u2019t have the same technical knowledge. Our goal when communicating should be that the person reading our words can understand what we have to say. To say in other words: it doesn\u2019t matter how technically correct our writing is, our words won\u2019t help if those reading them can\u2019t understand what we want to\u00a0share.</p>\n<p>To help that our message is understandable, there are some techniques:</p>\n<ul>\n<li>We should try to use short words in terms of syllables length. Try to stick with short words, around (3 or 4 syllables) when possible.</li>\n<li>Use short sentences instead of long ones (maximum 24\u00a0words).</li>\n<li>Remove unnecessary complexity:</li>\n</ul>\n<p>There are some scores we should have in mind, like the <a href=\"https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests\">Flesch\u2013Kincaid readability tests</a> or the <a href=\"https://en.wikipedia.org/wiki/Gunning_fog_index\">Gunning fog index</a>. The latter index estimates the years of formal education a person needs to understand the text on the first reading (the lower, the better). Some tools we can use to review our text are <a href=\"http://textalyser.net/\">Textalyser</a>, <a href=\"http://www.hemingwayapp.com/\">Hemingway App</a> and <a href=\"https://www.lexicool.com/text_analyzer.asp\">Text Analyzer</a>.</p>\n<p>Her concluding words were: \u201cBecause no one has ever complained that something was too easy to\u00a0read\u201d.</p>\n<h4>Possibilities of WebVR and its role in the\u00a0future</h4>\n<p>VR is a trending topic nowadays, typically focused on video games since it\u2019s birth. Many companies have been introducing their VR devices to the market. The main one for us, developers, is the <a href=\"https://vr.google.com/cardboard/\">Google Cardboard</a> because it allows experimenting the VR world without much investment. The browser has potential to play a big role in the future and this is where we can start developing for\u00a0VR.</p>\n<p><a href=\"https://twitter.com/rvdleun\">Ruben van der Leun</a> opened his talk with his exhaustive knowledge of the VR history and how it can reach more users through the web. During his talk, the attendees could follow his demo progress through a Google Cardboard. He shared that with the <a href=\"https://aframe.io/\">A-Frame</a> library we can have a functional scene in a few minutes. After five minutes we got the following result\u00a0(<a href=\"https://gist.github.com/lgarest/ff8bd4e0934896bcac3f5073c2e3d8b6\">gist</a>):</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*Feb9QfwiVDlDVJ23.gif\"></figure><p>BTW: Videos of all talks can be found in\u00a0<a href=\"https://itunes.apple.com/nl/podcast/fronteers-videos/id1136212068?l=en\">iTunes</a>.</p>\n<p>\u2014\u200a\u2014\u200a\u2014 <br> Follow Elements on <a href=\"https://www.facebook.com/elementsbuildsapps\">Facebook</a>, <a href=\"http://twitter.com/elementsinter\">Twitter</a> and <a href=\"https://www.linkedin.com/company/elementsinteractive\">LinkedIn</a>!</p>\n<p><em>Originally published at www.elements.nl on October 13,\u00a02017.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=46d6006e5143\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elements/fronteers-2017-46d6006e5143\">Fronteers 2017</a> was originally published in <a href=\"https://medium.com/elements\">Elements blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<p><em>Written by </em><a href=\"https://medium.com/u/4b2e69af102e\">Luis Miguel Fern\u00e1ndez</a><em>, </em><a href=\"https://medium.com/u/7cfbd7b11755\"><em>Luis Garc\u00eda Estrades</em></a><em>, Ricardo Ambrogi and </em><a href=\"https://medium.com/u/1086cf4b8abe\"><em>Stoyan\u00a0Delev</em></a></p>\n<p><em>On Thursday 5th and Friday October 6th, four of our front-enders (the two Luises, Ricardo and Stoyan) went to </em><a href=\"https://fronteers.nl/congres/2017\"><em>Fronteers Conf 2017</em></a><em>, the tenth edition of the event already, in the beautiful </em><a href=\"https://www.pathe.nl/bioscoop/tuschinski\"><em>Path\u00e9 Tuschinski theatre</em></a><em> in Amsterdam. In this blog post they discuss the talks they liked the\u00a0most.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*AfA4TwhCq2NybgUUmvamNw.jpeg\"></figure><h3>Ricardo</h3>\n<h4>A Modern Front-end Workflow</h4>\n<p>Every front-end developer makes use of <a href=\"https://developers.google.com/web/tools/chrome-devtools/\">DevTools</a> on daily basis, but just a few (or maybe just <a href=\"https://twitter.com/umaar?lang=en\">Umar Hansa</a>) know how to make fully use of it. And because of that, Umar Hansa was in charge of speaking about DevTools at Fronteers 2017. When introduced, he was referred as the \u2018one\u2019 who knows more about DevTools than its own creators. Umar showed us a few hidden secrets that are available in DevTools and how to make most use of them. Umar taught us how to perform audits, which help us fixing and finding problems that might affect our websites, including accessibility issues.</p>\n<h4>Debugging Accessibility</h4>\n<p>Talking about accessibility, this was the subject of <a href=\"https://twitter.com/sundress?lang=en\">Alice Boxhall\u2019s</a> talk. Alice showed us a funny example of a website that accepted no clicks at all: navigating was triggered by hovering at determined things, which was obviously not accessible at all. Alice tried to show us how disabled people use the web and how to make the websites we develop better for them. She elaborated on Umar\u2019s talk, by giving us a more in-depth example on how to use DevTools\u2019 new features which can help us debug and understand accessibility of the websites we develop at Elements.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*w87grOaA1SpnLk0uX1QFZw.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zjTqeoDkhggyyITH9xUvow.jpeg\"></figure><h3>Stoyan</h3>\n<h4>WebAssembly 101</h4>\n<p>This talk by <a href=\"https://twitter.com/AshKyd\">Ash Kyd</a> was about <a href=\"http://webassembly.org/\">WebAssembly</a> (a.k.a. wasm). It is a new standard which allows the browsers to \u201cload\u201d and \u201crun\u201d assembly-like code. The performance of web assembly is near-native since browsers do not need to parse, optimize and compile JavaScript. WebAssembly can be compiled from languages like C, C++, Rust and there are also experiments with Python, C#, etc. So everyone can write browser code in the preferred language and compile to wasm. But the main idea of it is not to replace JavaScript. Actually in most cases you will run both JavaScript and wasm in the same app/website. WebAssembly will open lots of doors for developers, things like image/video processing, games, and AI in the browser will become more and more\u00a0common.</p>\n<h4>Caches all the way\u00a0down</h4>\n<p>As we all know caching is one of the two most difficult things in software development. <a href=\"https://twitter.com/yoavweiss\">Yoav Weiss</a> managed to give a great talk about the difficulties and weird behavior of caches in the browser. Starting from in-memory cache, which is the fastest, and basically store data for the same resources. For example, if you request an image twice from a page, the second request will be returned immediately from memory\u00a0cache.</p>\n<p>The next level of caching is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">service worker</a>: kind of a proxy/middleware, which can intercept all HTTP requests and put them in a cache. Server workers can be programmed, so it is up to you which request to be cached and when. Next layer is HTTP cache which follows HTTP semantics, also allows resources to be reused. So an image from page A can be cached and reused on page B. And here comes the weirdest part: there a plenty of directives and combinations with confusing names, no-store, no-cache, immutable, must-revalidate, max-age, etag, public, private. On top of that there is HTTP/2 push cache, where push resources are stored as part of a push session. In conclusion: caching on the web is not easy, but can achieve serious performance improvements.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bXM1iXq88_0WCdtDsEygXA.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*AL2A5asjCRo7pojVPrjTeA.jpeg\"></figure><h3>Luis Mi</h3>\n<h4>Impostor Syndrome and Individual Competence</h4>\n<p>This talk by <a href=\"https://twitter.com/jesslynnrose\">Jessica Rose</a> focuses on how the <a href=\"https://en.wikipedia.org/wiki/Impostor_syndrome\">impostor syndrome</a> and the <a href=\"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect\">Dunning-Kruger effect</a> work to undermine our estimation of our individual skills. In short, the impostor syndrome is a concept describing individuals who are marked by an inability to internalize their accomplishments and a persistent fear of being exposed as a \u201cfraud\u201d. Or, to explain it plain words: \u201cYour brain uses bad data to build worse conclusions, and then becomes attached to those.\u201d This usually means that you have a feeling that you don\u2019t belong, that you are not good at doing something, that your boss is going to fire you and you will end up living under a\u00a0bridge.</p>\n<p>This can seem like a big deal for the average developer, but in fact is something widely present in the nowadays society, present in most working environments and it\u2019s -usually- rather harmless, though it\u2019s more common for minorities, because the feeling of not belonging could prove to be more relevant. In this talk Jessica Rose tells us that there are studies that point out a couple of issues that impostor syndrome creates for\u00a0you:</p>\n<ul>\n<li>Feelings of inadequacy</li>\n<li>Avoiding displays of target\u00a0skills.</li>\n</ul>\n<p>But in the other hand, it boosts soft\u00a0skills:</p>\n<ul>\n<li>Use of charm to improve social mitigation</li>\n<li>Increased diligence and dedication, to compensate for your feeling of lack of\u00a0skill</li>\n</ul>\n<p>Unluckily, the imposter syndrome, as most of cognitive biases, is something that it\u2019s not really fixable. One of the things that you can do to improve is getting better data to compensate the \u201cbad data\u201d your brain is gathering. For example things like getting a certification on your skills, or start a new project that is more compelling.</p>\n<p>Jessica also gave us some hints to deal with people who suffer from the impostor syndrome. Although it\u2019s mainly applicable to any professional interaction with anyone in your team, to make everything better for others, not only the ones with the impostor syndrome. So, summarizing, do not, ever, tell someone they have impostor syndrome, instead:</p>\n<ul>\n<li>Give positive meaningful and actionable feedback;</li>\n<li>Talk about your own feelings and fears when you feel comfortable doing\u00a0so.</li>\n</ul>\n<h4>The Landscape of Front-End Testing</h4>\n<p>This talk from <a href=\"https://twitter.com/aliciability\">Alicia Sedlock</a> covers the breadth of testing strategies available to front-end developers now, their benefits, and considerations before integrating them into your applications. She explains that you should automate as much as possible in the development cycle and points out six areas of testing that are relevant to some extent, and divides them in old school (the classical sense of testing which have been around for some time in several other technologies already) and a new school of\u00a0testing:</p>\n<p>Old school:</p>\n<ul>\n<li>\n<strong>Unit tests</strong> are to ensure small pieces of code work as expected and independently. Most of the time, it means that given one single input, you should test that you end up with a one and single output. She provides as well some examples of big players that we can find around: Jasmine, Mocha, QUnit, Chai, Sinon and Webdriver.io;</li>\n<li>\n<strong>Integration tests</strong> check that all the small pieces play well together in the bigger picture. It\u2019s a step ahead of Unit testing and usually you should test also the side effects that might happen in that \u201cbigger\u201d piece of code. So most of the time you should check several inputs, several outputs, and everything that might happen in\u00a0between;</li>\n<li>\n<strong>Acceptance testing</strong> makes sure that we can accomplish major tasks. Most of the time this is being taken care of by a QA team, but they can be automated as well. You should check that a whole user story can be started and finished, regardless of how it is technically built. A tool that has been around helping with this kinds of testing is Selenium, but Alicia provides some more modern examples, like Jasmine-integration, Karma or Nightwatch.</li>\n</ul>\n<p>New school:</p>\n<ul>\n<li>\n<strong>Visual regression testing</strong> has recently started gaining popularity\u200a\u2014\u200aand for good reason. In its most basic form, it\u2019s a series of tests that run through your site, take screenshots of various components, compare those screenshots against baseline images and alert you when things change. Some of the visual regression tools that she lists are the following: PhantomCSS, BackstopJS, Wraith, Webdriver.io and Percy.io.</li>\n<li>\n<strong>Accessibility tests</strong> compare your site against accessibility standards. Accessibility tests are a subset of usability testing where the users under consideration have disabilities that affect how they use the web. The end goal, in both usability and accessibility, is to discover how easily people can use a website and feed that information back into improving future designs and implementations. Some tools that might help with this, are: a11y (with grunt-a11y), Pa11y, react-a11y.</li>\n<li>\n<strong>Performance testing</strong> keeps your project honest about possible performance issues. In this case you should establish a performance budget, and then, once those specific goals are set, you stick to them. Anytime you want to add something to an application, you need to ensure it stays within your budget. You can go with one of these three options if something does not fit within the budget: optimize an existing feature or asset on the page, remove an existing feature or asset from the page, or don\u2019t add the new feature or asset at\u00a0all.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8TJlNQkQSboOD5Q_eERYag.jpeg\"></figure><h3>Luis G</h3>\n<h4>1Up Your Writing with Plain\u00a0Language</h4>\n<p><a href=\"https://twitter.com/handcoding\">Ashley Bischoff</a> explained the importance of communicating in the simplest way possible. Often we have to document or write reports and we should put our best effort to write in a clear way. Because, the ones reading our documents might not be familiar with the subject matter or don\u2019t have the same technical knowledge. Our goal when communicating should be that the person reading our words can understand what we have to say. To say in other words: it doesn\u2019t matter how technically correct our writing is, our words won\u2019t help if those reading them can\u2019t understand what we want to\u00a0share.</p>\n<p>To help that our message is understandable, there are some techniques:</p>\n<ul>\n<li>We should try to use short words in terms of syllables length. Try to stick with short words, around (3 or 4 syllables) when possible.</li>\n<li>Use short sentences instead of long ones (maximum 24\u00a0words).</li>\n<li>Remove unnecessary complexity:</li>\n</ul>\n<p>There are some scores we should have in mind, like the <a href=\"https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests\">Flesch\u2013Kincaid readability tests</a> or the <a href=\"https://en.wikipedia.org/wiki/Gunning_fog_index\">Gunning fog index</a>. The latter index estimates the years of formal education a person needs to understand the text on the first reading (the lower, the better). Some tools we can use to review our text are <a href=\"http://textalyser.net/\">Textalyser</a>, <a href=\"http://www.hemingwayapp.com/\">Hemingway App</a> and <a href=\"https://www.lexicool.com/text_analyzer.asp\">Text Analyzer</a>.</p>\n<p>Her concluding words were: \u201cBecause no one has ever complained that something was too easy to\u00a0read\u201d.</p>\n<h4>Possibilities of WebVR and its role in the\u00a0future</h4>\n<p>VR is a trending topic nowadays, typically focused on video games since it\u2019s birth. Many companies have been introducing their VR devices to the market. The main one for us, developers, is the <a href=\"https://vr.google.com/cardboard/\">Google Cardboard</a> because it allows experimenting the VR world without much investment. The browser has potential to play a big role in the future and this is where we can start developing for\u00a0VR.</p>\n<p><a href=\"https://twitter.com/rvdleun\">Ruben van der Leun</a> opened his talk with his exhaustive knowledge of the VR history and how it can reach more users through the web. During his talk, the attendees could follow his demo progress through a Google Cardboard. He shared that with the <a href=\"https://aframe.io/\">A-Frame</a> library we can have a functional scene in a few minutes. After five minutes we got the following result\u00a0(<a href=\"https://gist.github.com/lgarest/ff8bd4e0934896bcac3f5073c2e3d8b6\">gist</a>):</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*Feb9QfwiVDlDVJ23.gif\"></figure><p>BTW: Videos of all talks can be found in\u00a0<a href=\"https://itunes.apple.com/nl/podcast/fronteers-videos/id1136212068?l=en\">iTunes</a>.</p>\n<p>\u2014\u200a\u2014\u200a\u2014 <br> Follow Elements on <a href=\"https://www.facebook.com/elementsbuildsapps\">Facebook</a>, <a href=\"http://twitter.com/elementsinter\">Twitter</a> and <a href=\"https://www.linkedin.com/company/elementsinteractive\">LinkedIn</a>!</p>\n<p><em>Originally published at www.elements.nl on October 13,\u00a02017.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=46d6006e5143\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elements/fronteers-2017-46d6006e5143\">Fronteers 2017</a> was originally published in <a href=\"https://medium.com/elements\">Elements blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": [
        "front-end-development",
        "caching",
        "tech-conference",
        "javascript",
        "webassembly"
      ]
    }
  ]
}
